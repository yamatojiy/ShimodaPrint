*■*----------------------------------------------------------
*■*-----
*■*-----     桐で使う汎用手続きをまとめたファイルです。
*■*-----
*■*----------------------------------------------------------
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　テーブルID調査
*■*:　ターゲットのテーブルが開いてても開いて無くても表番号を返す関数
*■*:　引数１：ターゲットのテーブルアドレス
*■*:　引数２：新規で開くステータス（専有とか参照とか、すでに開いている場合はそのまま）
*■*:　戻り値：表のＩＤ
*■*:　戻り値：既にオープンされている場合は１、新規でオープンなら０
手続き定義開始 表オープン（ 文字列 &tbx ,文字列　&モード　, 参照　数値　&表ID , 参照　数値　&openF ）

    var 数値  { &chk }
    *■*-------------------------------------
    *■*--  編集表番号取得（開いてても問題無し
    *■*-------------------------------------
    &表ID = #表番号取得( &tbx )
    if ( .not &表ID ) /*←未定義なら */
        
        表 &tbx , モード = &モード , 終了状態 = &chk
        &表ID = #表番号取得( &tbx )　　

        &openF = 0
    else
        &openF = 1
    end

手続き定義終了
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　確定情報返答
*■*:　予定の変数と確定の変数を受け取って、確定があれば確定を、無ければ予定を返す
*■*:　戻り値：数値：（返す数値）
*■*:　戻り値：数値：フラグ。確定なら１　予定なら０
*■*:　引数１：数値：予定情報
*■*:　引数２：数値：確定情報
手続き定義開始　確定情報返答（ 参照　数値　&AnsNum , 参照　数値　&AnsBoot , 数値　&予定値　, 数値 &確定値 ）

    /*▼未定義じゃなければ確定 */
    if ( &確定値 <> #未定義 )
        &AnsNum  = &確定値
        &AnsBoot = 1
    else

        &AnsNum  = &予定値
        &AnsBoot = 0
    end

手続き定義終了
*■***********************************************************
*■*** Lib次の営業日検出2 
*■***  引数を自己処理型にした改良版です。これにより、余計なテーブルを宣言せず使えます。
*■*** 引数１（戻）：次の営業日：調査して、次の営業日を返す。
*■***　引数２：今日：　調査したい日の軸となる営業日を入れる。（例えば今日）
*■***
*■***　概要：今日を入れると翌日の営業日を返す関数です。
*■***　　　　　例えば、今日が月曜日だったら、翌日の火曜日の日付が帰ってきます。
*■***　　　　　休み用tbxから調査して返すので、休み日を整理したい場合はtbxを修正してください。
*■***
*■***********************************************************
手続き定義開始 Lib次営業日検出2（　文字列 &Lib , 日時 &今日 , 参照　日時 &次営業日　）
    
    /*▼変数宣言 */
    var 文字列{ &holidayListTbx = &Lib +"..\tbx\01_01_HolidayList.tbx" }
    var 数値  { &i = 0 }
    var 文字列{ &専有 =　"専有" }
    var 数値  { &CHK , &OPnum , &OPboot }
    
    var 日時  { &検査日 = #日数加算( &今日 , 1 ) }
    var 文字列{ &msgtxt }

    手続き実行　表オープン（ &holidayListTbx ,　&専有　,　&OPnum , &OPboot ）
    編集表　&OPnum

    繰り返し（ &i = 0 ）

        &検査日 = #日時日付( &検査日 )
        検索 [日付のみ] { &検査日 } , 終了状態 = &CHK 

        /*▼該当が無ければ、その日は営業日という事 */
        if (　&CHK = -1 )
            
            &次営業日 = &検査日
            繰り返し中止    
        else

            /*▼検査日を+1日する */
            &検査日 = #日数加算( &検査日 , 1 )
        end

    繰り返し終了 

    条件 ( &OPboot = 0 ) 終了 表 &OPnum

手続き定義終了
*■***********************************************************
*■*** Lib前の営業日検出2 
*■***  引数を自己処理型にした改良版です。これにより、余計なテーブルを宣言せず使えます。
*■*** 引数１（戻）：前営業日：調査して、前営業日を返す。
*■***　引数２：今日：　調査したい日の軸となる営業日を入れる。（例えば今日）
*■***
*■***　概要：今日を入れると前営業日を返す関数です。
*■***　　　　　例えば、今日が月曜日だったら、先週の金尿日の日付が帰ってきます。
*■***　　　　　休み用tbxから調査して返すので、休み日を整理したい場合はtbxを修正してください。
*■***
*■***********************************************************
手続き定義開始 Lib前営業日検出2（ 文字列 &Lib , 日時 &今日 , 参照　日時 &前営業日 ）
    
    /*▼変数宣言 */
    var 文字列{ &holidayListTbx = &Lib +"..\tbx\01_01_HolidayList.tbx" }
    var 数値  { &i = 0 }
    var 文字列{ &専有 =　"専有" }
    var 数値  { &CHK , &OPnum , &OPboot }
    
    var 日時  { &検査日 = #日数加算( &今日 , -1 ) }
    var 文字列{ &msgtxt }

    手続き実行　表オープン（ &holidayListTbx ,　&専有　,　&OPnum , &OPboot ）
    編集表　&OPnum

    繰り返し（ &i = 0 ）

        &検査日 = #日時日付( &検査日 )
        検索 [日付のみ] { &検査日 } , 終了状態 = &CHK 

        /*▼該当が無ければ、その日は営業日という事 */
        if (　&CHK = -1 )
            
            &前営業日 = &検査日
            繰り返し中止    
        else

            /*▼検査日を+1日する */
            &検査日 = #日数加算( &検査日 , -1 )
        end

    繰り返し終了 

    条件 ( &OPboot = 0 ) 終了 表 &OPnum

手続き定義終了
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　手続き処理
*■*:　
*■*: その項目の必要情報を取得し、ある程度テーブルから算出したあと、印刷にかかる概算数値を返す関数を作る
*■*:
*■*:　引数１：文字列：印刷機
*■*:　引数２：数値　　：部数
*■*:　引数３：数値　　：台数
*■*:　引数４：数値　　：面付
*■*:　引数５：文字列：区分
*■*:　引数６：文字列：色
*■*:　引数７：文字列：備考
*■*:
*■*:　戻り値：数値：作業概算時間
*■*:
*■*: 外部パス：&印刷スペックtbx
*■*: 外部パス：&印刷色設定tbx
*■*:
手続き定義開始 Lib印刷作業時間概算（ 文字列 &印刷機 , 数値　&部数 , 数値　&台数 , 数値　&面付 , 文字列 &区分　, 文字列 &色　, 文字列 &備考　, 参照　時間　&Time , 文字列　&印刷スペックtbx , 文字列 &印刷色設定tbx ）

    var 数値  { &通し枚数 , &作業時間 , &版替え時間 , &色調整時間 , &補助業務時間 , &S級調整時間　, &合計作業時間 }
    var 数値  { &区分補正値 , &通し回数値 }
    var 数値  { &回転数 , &版替えmin , &色調整min , &S級min , &S級boot , &補正台数　}
    var 文字列{ &TimeTXT }
    *■*-------------------------------------
    *■*-- 補正値調査
    *■*-------------------------------------
    手続き実行 区分補正値計算　( &面付 , &区分 , &区分補正値 )
    手続き実行 作業係数調査 ( &色　, &印刷機 , &通し回数値 , &印刷色設定tbx )
    手続き実行 印刷スペック情報格納 (&印刷機 , &回転数 , &版替えmin , &色調整min , &S級min　, &印刷スペックtbx )
    手続き実行　備考S級判定 ( &備考 , &S級boot )
    /*▼台数が1以下だった場合は、補正を掛ける */
    if ( 1 > &台数 )
        &補正台数 = 1
    else
        &補正台数 = &台数
    end
    *■*-------------------------------------
    *■*-- 通し枚数　設定
    *■*-------------------------------------
    &通し枚数 = ( &部数 * &台数 ) *  &通し回数値　/ &区分補正値
    &作業時間 = ( &通し枚数 / &回転数 ) * 60
    &版替え時間 = ( &版替えmin * &補正台数 ) * &通し回数値
    &補助業務時間 = ( &色調整min * &補正台数 ) * &通し回数値
    &S級調整時間　= &S級min * &S級boot
    &合計作業時間 = &作業時間 + &版替え時間 + &補助業務時間 + &S級調整時間
    &TimeTXT = #時間文字列( &合計作業時間 , 2 )
    &Time = #時間値( &TimeTXT )

手続き定義終了
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　
*■*:　S級判定を行う関数。　特定文字があれば１無ければ０を返す関数
*■*:　
*■*:　引数１：備考
*■*:　
*■*:　戻り値：数値：判定
手続き定義開始 備考S級判定（ 文字列 &備考 , 参照　数値　&判定　）

    &判定　= #文字位置( &備考 , "【色調整重要】" )

    if ( &判定 > 0 )
        &判定 = 1
    else
        &判定 = 0
    end

手続き定義終了

*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　
*■*:　印刷機のスペック情報テーブルから、回転数と版替えにかかる時間などを変数に格納する
*■*:　
*■*:　引数１：印刷機情報
*■*:　
*■*:　戻り値：数値：回転数
*■*:　戻り値：数値：版替え時間
*■*:　戻り値：数値：色変え時間
*■*:　
手続き定義開始 印刷スペック情報格納（ 文字列 &印刷機 , 参照　数値 &回転数 , 参照　数値 &版替え時 , 参照　数値 &色調整時 ,  参照　数値 &S級時 , 文字列　&印刷スペックtbx ）

    var 文字列{ &tbx }
    &tbx = &印刷スペックtbx

    表 &tbx , 表番号 = 13 , モード = 共有更新
    
        検索 [機械名] { &印刷機 } , 終了状態 = &CHK
        
        if ( &CHK = 1 )

            &回転数     =　[回転数]
            &版替え時   =　[版替え]
            &色調整時   =　[色調整]
            &S級時      = [S級]
            
        else

            *確認 "手続　印刷スペック情報格納　にて　印刷機参照ができませんでした。"
        end

    終了 表 13

手続き定義終了

*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　
*■*:　印刷機と色情報から、作業係数を返す関数
*■*:　
*■*:　引数１：色（4+4）とかの情報
*■*:　引数２：印刷機：菊全機とか
*■*:　
*■*:　戻り値：数値：作業係数
*■*:　
手続き定義開始 作業係数調査（ 文字列 &色　, 文字列 &印刷機 , 参照　数値　&作業係数 , 文字列　&印刷色設定tbx　）

    var 文字列{ &印刷用色設定tbx }
    &印刷用色設定tbx = &印刷色設定tbx

    表 &印刷用色設定tbx , 表番号 = 13 , モード = 共有更新

        絞り込み [印刷機] { &印刷機 } , 終了状態 = &CHK

        検索 [ReturnS] { &色 } , 終了状態 = &CHK 
        
        if ( &CHK = 1 )
            &作業係数 = [ReturnN]
        else
            &作業係数 = 3
        end
     
    終了 表 13

手続き定義終了
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　
*■*:　区分によっては面付数で通し枚数を減らす場合があるので、その判定をする関数
*■*:
*■*: 枚葉と新聞は面付に関係があるが、冊子の場合はページ面付になるので、台数の方で係数をかけるようにする。
*■*:　
*■*:　引数１：面付数
*■*:　引数２：区分
*■*:　
*■*:　戻り値：数値：区分補正値
*■*:　
手続き定義開始 区分補正値計算（ 数値　&面付 , 文字列 &区分　,　参照 数値 &区分補正値 ）

    ケース開始
        ケース（ &区分 = "枚葉" ）

            &区分補正値 = &面付
        
        ケース（　&区分 = "冊子"　）

            &区分補正値 = 1

        ケース（　&区分 = "新聞"　）

            &区分補正値 = 1

        ケース（　&区分 = "複写"　）

            &区分補正値 = 1

    ケース終了

    /*▼2025/01/21_除算エラーで処理できないケースが出てきた。対処として、０になるばあいは強制的に１になる。 */
    条件 ( &区分補正値 = 0 ) &区分補正値 = 1

手続き定義終了
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　
*■*:　項目にナンバーを順入れする
*■*:
*■*: 項目名を受け取って、その項目に１からナンバーを入れます。整数。
*■*:　ナンバー入れて終わりなので、ある程度加工した状態で呼ぶ必要がある。
*■*:　
手続き定義開始 ナンバー仕込み（ 文字列　&項目名　）

    var 数値  { &Pnum  = 1 }
    var 文字列{ &作業コマンド }
    &作業コマンド = "行訂正 終了状態 = &CHK , ["+ &項目名 +"] = &Pnum"

    ジャンプ 行番号 = 1
    繰り返し（ .NOT #終端行 ）
        
        コマンド　&作業コマンド　
        &Pnum = &Pnum + 1

        ジャンプ 行番号 = 次行
    繰り返し終了 

手続き定義終了