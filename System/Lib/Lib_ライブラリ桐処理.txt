*■*----------------------------------------------------------
*■*-----
*■*-----     桐で使う汎用手続きをまとめたファイルです。
*■*-----
*■*----------------------------------------------------------
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　テーブルID調査
*■*:　ターゲットのテーブルが開いてても開いて無くても表番号を返す関数
*■*:　引数１：ターゲットのテーブルアドレス
*■*:　引数２：新規で開くステータス（専有とか参照とか、すでに開いている場合はそのまま）
*■*:　戻り値：表のＩＤ
*■*:　戻り値：既にオープンされている場合は１、新規でオープンなら０
手続き定義開始 表オープン（ 文字列 &tbx ,文字列　&モード　, 参照　数値　&表ID , 参照　数値　&openF ）

    var 数値  { &chk }
    *■*-------------------------------------
    *■*--  編集表番号取得（開いてても問題無し
    *■*-------------------------------------
    &表ID = #表番号取得( &tbx )
    if ( .not &表ID ) /*←未定義なら */
        
        表 &tbx , モード = &モード , 終了状態 = &chk
        &表ID = #表番号取得( &tbx )　　

        &openF = 0
    else
        &openF = 1
    end

手続き定義終了
*■*::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
*■*:　確定情報返答
*■*:　予定の変数と確定の変数を受け取って、確定があれば確定を、無ければ予定を返す
*■*:　戻り値：数値：（返す数値）
*■*:　戻り値：数値：フラグ。確定なら１　予定なら０
*■*:　引数１：数値：予定情報
*■*:　引数２：数値：確定情報
手続き定義開始　確定情報返答（ 参照　数値　&AnsNum , 参照　数値　&AnsBoot , 数値　&予定値　, 数値 &確定値 ）

    /*▼未定義じゃなければ確定 */
    if ( &確定値 <> #未定義 )
        &AnsNum  = &確定値
        &AnsBoot = 1
    else

        &AnsNum  = &予定値
        &AnsBoot = 0
    end

手続き定義終了
*■***********************************************************
*■*** Lib次の営業日検出2 
*■***  引数を自己処理型にした改良版です。これにより、余計なテーブルを宣言せず使えます。
*■*** 引数１（戻）：次の営業日：調査して、次の営業日を返す。
*■***　引数２：今日：　調査したい日の軸となる営業日を入れる。（例えば今日）
*■***
*■***　概要：今日を入れると翌日の営業日を返す関数です。
*■***　　　　　例えば、今日が月曜日だったら、翌日の火曜日の日付が帰ってきます。
*■***　　　　　休み用tbxから調査して返すので、休み日を整理したい場合はtbxを修正してください。
*■***
*■***********************************************************
手続き定義開始 Lib次営業日検出2（　文字列 &Lib , 日時 &今日 , 参照　日時 &次営業日　）
    
    /*▼変数宣言 */
    var 文字列{ &holidayListTbx = &Lib +"..\tbx\01_01_HolidayList.tbx" }
    var 数値  { &i = 0 }
    var 文字列{ &専有 =　"専有" }
    var 数値  { &CHK , &OPnum , &OPboot }
    
    var 日時  { &検査日 = #日数加算( &今日 , 1 ) }
    var 文字列{ &msgtxt }

    手続き実行　表オープン（ &holidayListTbx ,　&専有　,　&OPnum , &OPboot ）
    編集表　&OPnum

    繰り返し（ &i = 0 ）

        &検査日 = #日時日付( &検査日 )
        検索 [日付のみ] { &検査日 } , 終了状態 = &CHK 

        /*▼該当が無ければ、その日は営業日という事 */
        if (　&CHK = -1 )
            
            &次営業日 = &検査日
            繰り返し中止    
        else

            /*▼検査日を+1日する */
            &検査日 = #日数加算( &検査日 , 1 )
        end

    繰り返し終了 

    条件 ( &OPboot = 0 ) 終了 表 &OPnum

手続き定義終了
*■***********************************************************
*■*** Lib前の営業日検出2 
*■***  引数を自己処理型にした改良版です。これにより、余計なテーブルを宣言せず使えます。
*■*** 引数１（戻）：前営業日：調査して、前営業日を返す。
*■***　引数２：今日：　調査したい日の軸となる営業日を入れる。（例えば今日）
*■***
*■***　概要：今日を入れると前営業日を返す関数です。
*■***　　　　　例えば、今日が月曜日だったら、先週の金尿日の日付が帰ってきます。
*■***　　　　　休み用tbxから調査して返すので、休み日を整理したい場合はtbxを修正してください。
*■***
*■***********************************************************
手続き定義開始 Lib前営業日検出2（ 文字列 &Lib , 日時 &今日 , 参照　日時 &前営業日 ）
    
    /*▼変数宣言 */
    var 文字列{ &holidayListTbx = &Lib +"..\tbx\01_01_HolidayList.tbx" }
    var 数値  { &i = 0 }
    var 文字列{ &専有 =　"専有" }
    var 数値  { &CHK , &OPnum , &OPboot }
    
    var 日時  { &検査日 = #日数加算( &今日 , -1 ) }
    var 文字列{ &msgtxt }

    手続き実行　表オープン（ &holidayListTbx ,　&専有　,　&OPnum , &OPboot ）
    編集表　&OPnum

    繰り返し（ &i = 0 ）

        &検査日 = #日時日付( &検査日 )
        検索 [日付のみ] { &検査日 } , 終了状態 = &CHK 

        /*▼該当が無ければ、その日は営業日という事 */
        if (　&CHK = -1 )
            
            &前営業日 = &検査日
            繰り返し中止    
        else

            /*▼検査日を+1日する */
            &検査日 = #日数加算( &検査日 , -1 )
        end

    繰り返し終了 

    条件 ( &OPboot = 0 ) 終了 表 &OPnum

手続き定義終了
