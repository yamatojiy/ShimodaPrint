*■***********************************************************
*■***　メインタスクを変数で持ってくる一括処理です。
*■*** レポートまでをここで完了させてしまう。
*■***
*■***　当然ですが、他で使う変数はkexで宣言する
*■***
*■***
名札 MAIN

    var 日時  { &hoge , &today }

    &today = #日時値( "2024/4/14"  )
    手続き実行 Lib前回営業日検出　(　&today , &hoge )

終了
*■***********************************************************
*■*** Lib前回営業日検出　
*■*** 引数１：今日：　調査したい日の軸となる営業日を入れる。（例えば今日）
*■***　引数２（戻）：前日営業日：調査して、前回の営業日を返す。
*■***
*■***　概要：今日を入れると前日の営業日を返す関数です。
*■***　　　　　例えば、今日が月曜日だったら、前日の金曜日の日付が帰ってきます。
*■***　　　　　休み用tbxから調査して返すので、休み日を整理したい場合はtbxを修正してください。
*■***
*■***********************************************************
手続き定義開始 Lib前回営業日検出（ 日時　&今日 ,　参照　日時 &前回営業日　　）
    
    /*▼変数宣言 */
    var 文字列{ &HolidayListTbx = #一括パス名 + "..\tbx\01_01_HolidayList.tbx" }
    var 数値  { &H表ID  , &i = 0 , &H行番号 = 0 , &CHK }
    var 日時  { &検査日 = &今日 }
    var 文字列{ &msgtxt }

    表 &HolidayListTbx , モード = 共有更新
        &H表ID = #表番号取得( &HolidayListTbx )
        &検査日 = #日数加算( &検査日 , -1 )　/*←昨日の情報にセットしなおす */
        編集表 &H表ID

    繰り返し（ &i = 0 ）

        &検査日 = #日時日付( &検査日 )
        検索 [日付のみ] { &検査日 } , 終了状態 = &CHK 
        
        /*▼該当が無ければ、その日は営業日という事 */
        if (　&CHK = -1 )
            
            &前回営業日 = &検査日
            繰り返し中止    
        else

            /*▼検査日を+1日する */
            &検査日 = #日数加算( &検査日 , -1 )

        end

    繰り返し終了 

    終了 表 &H表ID

    *&msgtxt = "次の業務日は" + #日時文字列 ( &前回営業日 , 9 , 1 , 2  )

    確認 &msgtxt 

手続き定義終了
*■***********************************************************
*■*** Lib完了情報抽出
*■*** 引数１：抜き出したい日：　調査したい日の軸となる営業日を入れる。（例えば今日）
*■***　引数２（戻）～：調査した内容を返す
*■***
*■***　概要：指定した日の完了情報を返す関数です。パッケージ化できないので、変数で一個ずつ返します。
*■***
*■***********************************************************
手続き定義開始 Lib完了情報抽出（ 日時 &調査日 ）

    /*▼変数宣言 */
    var 文字列{ &完了tbx = #一括パス名 + "..\..\工程管理\工程完了\完了tbx v2\作業完了Base.tbx" }

    


手続き定義終了