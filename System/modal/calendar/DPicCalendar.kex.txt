*■*****************************************************************************
*■*****************　　　　　   　calendarの処理情報です。
*■*****************　　　　　　　　　組むのが面倒なのでネットにあった情報をそのまま使います。
*■*****************************************************************************
名札    メイン
    *■* HDLVAR で受け取れる変数は
    *■* ↓こちら　　　　　　　　　 文字列　　　　日時　　　  整数　　　 整数　　　　整数
    *■* &HDLVARmReturnParameter = "&mDateString, &mDateTime, &mYearNum, &mMonthNum, &mDayNum"
    *■* 2019.09.27 Rev.1 HDLVAR を使用しない場合、任意の組み込み変数へ代入するように変更した
    変数宣言　局所，日時　｛ &WIDGETmSendDate ｝
    変数宣言　局所，整数　｛ &WIDGETmLive ｝

    変数宣言　局所，文字列｛ &mDateString, &mWidgetFieldDataType ｝
    変数宣言　局所，日時　｛ &mDateTime ｝
    変数宣言　局所，整数　｛ &mYearNum, &mMonthNum, &mDayNum ｝

    変数宣言　局所，文字列｛ &mTodayString, &mDayOfWeekString, &mBeginningOfMonthString ｝
    変数宣言　局所，文字列｛ &mStringThisMonth, &mStringLastMonth, &mStringNextMonth ｝
    変数宣言　局所，文字列｛ &mStringThisMonthJPN,       &mStringLastMonthJPN,       &mStringNextMonthJPN       ｝
    変数宣言　局所，日時　｛ &mThisMonthDate,            &mLastMonthDate,            &mNextMonthDate ｝
    変数宣言　局所，文字列｛ &mDayString[ 105 ], &mDayObjectToday, &mDayObjectSelectNow, &mDayObjectSelectLast, &mDayObjectExit ｝
    変数宣言　局所，文字列｛ &mDayObjectTop, &mDayObjectBottom ｝
    変数宣言　局所，日時　｛ &mTodayDate, &mBeginningOfMonthDate ｝
    変数宣言　局所，整数　｛ &mWeekNumber, &mDayOfWeekNumber, &mDayNumber, &mThisMonth ｝
    変数宣言　局所，整数　｛ &mDimensions = 1, &mOptionpane = 0, &mDateTypeNum = 0, &mDateTimeScopeNum = 1, &mPaddingTypeNum = 0, &mPublicHolidayVisible = 1 ｝
    変数宣言　局所，整数　｛ &mClipboardCopy = 1, &mSTRvariableUse = 1, &m年月日variableUse = 1 ｝
    変数宣言　局所，数値　｛ &mFormWidthDefault, &mFormWidthExtend ｝
    変数宣言　局所，文字列｛ &m変数名dim[7] = ｛ "（なし）", "年月日", "時刻", "STR", "比較式", "置換式", "選択ファイル名" ｝｝
    変数宣言　局所，文字列｛ &m変数名A = &m変数名dim[4], &m変数名B = &m変数名dim[2] ｝
    変数宣言　局所，文字列｛ &m編集文字列 ｝
    変数宣言　局所，整数　｛ &mVriableListUse ｝


　*■* ↓ 2019.10.15 桐10s 新元号対応に変更　変数宣言　局所，文字列｛ &m日時文字列関数パラメータDim[22] = ｛ "環境設定と同じ形式","2002年 7月25日 ( 13時23分45秒 )","2002年 7月25日 ( 午後 1時23分45秒 )","平成14年 7月25日 ( 13時23分45秒 )","平成14年 7月25日 ( 午後 1時23分45秒 )","H 14/ 7/25 ( 13:23:45 )","H 14/ 7/25 ( 1:23:45 PM )","H 14- 7-25 ( 13:23:45 )","H 14- 7-25 ( 1:23:45 PM )","2002/ 7/25 ( 13:23:45 )","2002/ 7/25 ( 1:23:45 PM )","2002- 7-25 ( 13:23:45 )","2002- 7-25 ( 1:23:45 PM )","02/ 7/25 ( 13:23:45 )","02/ 7/25 ( 1:23:45 PM )","02- 7-25 ( 13:23:45 )","02- 7-25 ( 1:23:45 PM )","Jul 25,2002 ( 13:23:45 )","*  7/25/2002 ( 13:23:45 ) 日時型データとして扱えません","* 25 Jul 2002 ( 13:23:45 ) 日時型データとして扱えません","* 25/ 7/2002 ( 13:23:45 ) 日時型データとして扱えません","2002. 7.25 ( 13:23:45 )" ｝｝
　変数宣言　局所，文字列｛ &m日時文字列関数パラメータDim[22] = ｛ "環境設定と同じ形式","2019年10月15日 ( 11時 5分59秒 )","2019年10月15日 ( 午前11時 5分59秒 )","令和 1年10月15日 ( 11時 5分59秒 )","令和 1年10月15日 ( 午前11時 5分59秒 )","R 1/10/15 ( 11: 5:59 )","R 1/10/15 ( 11: 5:59 AM )","R 1-10-15 ( 11: 5:59 )","R 1-10-15 ( 11: 5:59 AM )","2019/10/15 ( 11: 5:59 )","2019/10/15 ( 11: 5:59 AM )","2019-10-15 ( 11: 5:59 )","2019-10-15 ( 11: 5:59 AM )","19/10/15 ( 11: 5:59 )","19/10/15 ( 11: 5:59 AM )","19-10-15 ( 11: 5:59 )","19-10-15 ( 11: 5:59 AM )","Oct 15,2019 ( 11: 5:59 )","* 10/15/2019 ( 11: 5:59 ) 日時型データとして扱えません","* 15 Oct 2019 ( 11: 5:59 ) 日時型データとして扱えません","* 15/10/2019 ( 11: 5:59 ) 日時型データとして扱えません","2019.10.15 ( 11: 5:59 )" ｝｝
　*■* 2020.04.01 要素数変更 &m祝日07月[5] → &m祝日07月[7]  &m祝日08月[3] → &m祝日08月[4]
　*■*変数宣言局所，文字列｛ &m祝日01月[3],&m祝日02月[3],&m祝日03月[1],&m祝日04月[5],&m祝日05月[6],&m祝日06月[1],&m祝日07月[5],&m祝日08月[3],&m祝日09月[4],&m祝日10月[4],&m祝日11月[3],&m祝日12月[1] ｝
　変数宣言　局所，文字列｛ &m祝日01月[3],&m祝日02月[3],&m祝日03月[1],&m祝日04月[5],&m祝日05月[6],&m祝日06月[1],&m祝日07月[7],&m祝日08月[4],&m祝日09月[4],&m祝日10月[4],&m祝日11月[3],&m祝日12月[1] ｝
　変数宣言　局所，整数　｛ &mIsReiwaSupported, &mIs元号 ｝
　変数宣言　局所，文字列｛ &mReiwaFirstDateString ｝

　変数宣言　局所，文字列｛ &mString, &mYearMonthGetWfm ｝
　&mYearMonthGetWfm = #一括パス名 + "INF_DatePicker_年月Set.wfm"

　変数宣言　局所，文字列｛ &mDatePickerOptionWfm ｝
　&mDatePickerOptionWfm = #一括パス名 + "INF_DatePicker_Option.wfm"

　変数宣言　局所，整数　｛ &mModeHDLVAR ｝

　変数宣言　局所，文字列｛ &mAliasThis ｝
　変数宣言　局所，長整数｛ &mマウス位置[ 2 ] = ｛ 1, 1 ｝, &m処理中止 ｝

　**---------- <begin 標準 INF Framework 第3.3版 名札 メイン> ---------------**
　*---------- begin IPS_form 名札 メイン ---------------*
　** Title : IPS_form      第 5.4 版 for 桐9-2012 / 桐9s / 桐10 / 桐10s ※ IPS_form はフリーソフト( free software ) です.
　変数宣言　局所，整数　｛ &INFmLive = 1 ｝　/* INF Framework を有効にする Yes:1 No:0 */
　変数宣言　局所，整数　｛ &ONEmLive = 1 ｝　/* IPS_form      を有効にする Yes:1 No:0 */
　if ( #変数( "ONEmLive" ) )
　　変数宣言　局所，文字列｛ &ONEmLibraryName ｝
　　&ONEmLibraryName = #一括パス名 + "IPS_Framework.cmd"
　　if ( #ファイルサイズ( &ONEmLibraryName )  < 0 .and #バージョン番号 >= 10 )
　　　&ONEmLibraryName = #ファイル名( &ONEmLibraryName, 5 ) + #ファイル名( &ONEmLibraryName, 2 ) + ".cmx"
　　end

　　if ( #ファイルサイズ( &ONEmLibraryName ) > 0 )
　　　ライブラリ　&ONEmLibraryName
　　else
　　　&INFmLive = 0　/* INF Framework を無効にする Yes:1 No:0 */
　　　&ONEmLive = 0  /* IPS_form      を無効にする Yes:1 No:0 */
　　　&ONEmLibraryName = "IPS_formライブラリが見つかりません\n\nフォルダ： "\
　　　　+  #文字置換( #ファイル名( &ONEmLibraryName, 5), "\", "\\" ) \
　　　　+ "\n\nファイル： " + #文字置換( #ファイル名( &ONEmLibraryName, 3), "\", "\\" )
　　　メッセージボックス　"IPS_form　名札 メイン", &ONEmLibraryName + "\n\nコメント： IPS + INF_Framework は停止しました", ｱｲｺﾝ=E, ﾎﾞﾀﾝ指定=1, 制御文字展開 = する
　　end
　end

　if ( #変数( "ONEmLive" ) )
　　変数宣言　局所，整数　｛ &UTLmLive = 1 ｝　           /* 拡張ライブラリを有効にする Yes:1 No:0 */
　　変数宣言　局所，整数　｛ &ONEmFieldWidthRestore ｝
　　**変数宣言　局所，整数　｛ &ONEmGroupObjectSeek       = 1 ｝ /* グループ項目のソースの項目を明細部から除外する                                                               */
　　変数宣言　局所，整数　｛ &ONEmNoCaptionColorUse       = 1 ｝ /* 項目名行・UTLCMDcmd改行ｷｰ方向・行ｾﾚｸﾀの色を設定をしない  2016.02.05                                          */
　　変数宣言　局所，整数　｛ &ONEmNoFocusFieldObjectReset = 1 ｝ /* 表示条件を読み込んだ時にフォーカス中の項目が見つかった場合、一番左の項目へフォーカスを移動しない  2017.04.21 */
　　** 「項目ジャンプ」機能 / 「列固定」機能で使用する変数
　　変数宣言　局所，文字列｛ &UTLJMPmFieldName = "項目", &UTLJMPmFieldNameDim[100], &UTLJMPmTargetFieldName, &UTLLOCKmFieldLockString = "固定", &UTLLOCKmFieldLockStringDim[10] ｝
　　変数宣言　局所，整数　｛ &INFmRestoreMode ｝
　　** 「コマンドボタンリピート」機能で使用する変数
　　変数宣言　局所，文字列｛ &SPNmRecordUpDownParameterList ｝
　　変数宣言　局所，整数　｛ &SPNmOnRecordUpDown ｝　/* タイマー参照フラグ */
　　** 「スピンボタン」機能で使用する変数
　　変数宣言　局所，文字列｛ &SPNmSpinButtonParameterList ｝
　　変数宣言　局所，整数　｛ &SPNmOnSpinButton ｝　  /* タイマー参照フラグ */
　　** 「項目の表示条件」機能で使用する変数  2017.03.21
　　変数宣言　局所，文字列｛ &ONEmCondition, &ONEmConditionBak, &ONEmConditionDIM[ 50 ], &ONEmFieldWidthMenuDIM[ 3 ] ｝

　　***---------- begin FormSectionColor 名札 メイン ---------------*
　　変数宣言　局所，整数　｛ &FSCmUse = 1 ｝　/* 「フォーム背景色」機能を有効にする Yes:1 No:0 */
　　条件　( #変数( "FSCmUse" ) )　変数宣言　局所，文字列｛ &FSCmFormColor, &FSCmFormColorParameter, &FSCmPaletteColorName ｝
　　条件　( #変数( "FSCmUse" ) )　変数宣言　局所，整数　｛ &FSCmSave = 1 ｝　/* 「フォーム背景色」を保存する Yes:1 No:0 */
　　条件　( #変数( "FSCmUse" ) )　変数宣言　局所，文字列｛ &FSCmModalFormColor = "象牙色" ｝
　　***---------- end   FormSectionColor 名札 メイン ---------------*

　　***---------- begin クラシックUIモード ⇔ モダンUIモード 名札 メイン ---------------*
　　if ( #バージョン番号 => 10.1 )  /* 桐10s 以降 */
　　　変数宣言　局所，整数　｛ &UImConvertLive = 1 ｝　/* クラシックUIモード ⇔ モダンUIモードを有効にする Yes:1 No:0 */
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，整数　｛ &UImModernUse = 0 ｝   /* モダンUIモードで変換:1 クラシックUIモードで変換:0                     */
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，文字列｛ &UImHoverColorName = "RGB(229,243,255)" ｝ /* 薄い色"RGB(229,243,255)" 濃い色"RGB(204,232,255)" */
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，文字列｛ &UImBackgroundColorMode, &UImBackgroundColorName, &UImThis ｝
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，整数　｛ &UImColorButtonUse = 1 ｝　　　　　　　　　　　　　/* コマンドボタンの色を指定する Yes:1 No:0               */
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，文字列｛ &UImModernColorNameButton = "RGB(225,225,225)" ｝  /*     モダンUIの時のボタンの色  "RGB(225,225,225)"      */
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，整数　｛ &UImClassicColorButtonNum = 2 ｝ 　　　　　　　　　/* クラシックUIの時のボタンの色 ボタンの表面色:1  継承:2 */
　　　条件　( #変数( "UImConvertLive" ) )　変数宣言　局所，整数　｛ &UImIsfamModernUI ｝　　　　　　　　             　/* ファミリ：famModernUI が存在するか否か                */
　　end
　　***---------- end   クラシックUIモード ⇔ モダンUIモード 名札 メイン ---------------*

　　**---------- begin VK 名札 メイン ---------------**
　　変数宣言　局所，整数　｛ &VKmLive = 1 ｝　/* VK機能を有効にする Yes:1 No:0 */
　　if ( #変数( "VKmLive" ) )
　　　** VK Variable
　　　変数宣言　局所，文字列｛ &VKmScanString, &VKmChr, &VKmFlagKeyName, &VKmKeyString, &VKmMouseString ｝
　　　変数宣言　局所，文字列｛ &VKmKeyNameKeyDownDim[8],   &VKmKeyNameSystemKeyDownDim[8],   &VKmKeyNameKeyUpDim[8],  &VKmKeyNameSystemKeyUpDim[8] ｝
　　　変数宣言　局所，文字列｛ &VKmKeyMacroKeyDownDim[8],  &VKmKeyMacroSystemKeyDownDim[8],  &VKmKeyMacroKeyUpDim[8], &VKmKeyMacroSystemKeyUpDim[8] ｝
　　　変数宣言　局所，文字列｛ &VKmKeyCancelKeyDownDim[8], &VKmKeyCancelSystemKeyDownDim[8], &VKmConstantNumList,     &VKmConstantChrList ｝
　　　変数宣言　局所，長整数｛ &VKmKeyNum, &VKmScanNum, &VKmFlagNum,   &VKmLongNum ｝
　　　変数宣言　局所，整数　｛ &VKmAltKey, &VKmRepeat,  &VKmExtendKey, &VKmNoKeyboard ｝
　　　変数宣言　局所，整数　｛ &VKmKeyDownLive, &VKmSystemKeyDownLive, &VKmKeyUpLive, &VKmSystemKeyUpLive, &VKmOnKey, &VKmConstantDimNum ｝
　　　エラー処理　手続き名 = "VKprcOnErrorVKprcConstantDefine"
　　　手続き実行　VKprcConstantDefine( &VKmConstantNumList, &VKmConstantChrList, &VKmConstantDimNum )
　　　エラー処理　/* 解除を忘れずに */
　　　** option 変数宣言　局所，整数　｛ &VKmKeyMask, &VKmCustomizeKeyMask, &VKmSpecialKeyMask, &VKmFunctionKeyMask ｝
　　　** option 変数宣言　局所，文字列｛ &VKmConstantChrDim[ &VKmConstantDimNum ] ｝
　　　** option 手続き実行　VKprcConstantDimStore( &VKmConstantChrList, &VKmConstantChrDim )
　　end
　　**---------- end   VK 名札 メイン ---------------**

　　** Rev.190 2016.11.18 IPS_form 名札 メイン に追加　変数宣言　局所，整数｛ &INFmKnjForm ｝
　　条件　( #バージョン番号 >= 10 .and #配列要素数( "INFmKnjForm" ) = -1 )　変数宣言　局所，整数｛ &INFmKnjForm ｝
　　手続き実行　ONEforLNCprcPropertyEditTblNameSet( ) /* ランチャー機能( HDLLNC )に対応する部分です */
　end
　*---------- end   IPS_form 名札 メイン ---------------*

　** IPS_form 特記事項: コメントアウト → ** IPS_form 変数宣言　局所，整数　｛ &INFmLive = 1 ｝　/* INF Framework を有効にする Yes:1 No:0 */
　** IPS_form 特記事項: 追加　　　　 　→ 条件 ( #変数( "INFmLive" ) )　&INFmTblNameUse = 1
　*---------- begin INF Framework 名札 メイン ---------------*
　** Title : INF Framework 第 3.3 版 for 桐9-2012 / 桐9s / 桐10 / 桐10s ※ INF Framework はフリーソフト( free software ) です.
　**変数宣言　局所，整数　｛ &INFmLive = 1 ｝　/* INF Framework を有効にする Yes:1 No:0 */
　if ( #変数( "INFmLive" ) )
　　*---------- begin INF Framework Library Load ---------------*
　　変数宣言　局所，文字列｛ &INFmLibraryName ｝
　　&INFmLibraryName = #一括パス名 + "INF_Framework.cmd"　/* Rev.88～142は INF_Tools_Framework.cmd ※Rev.73 までは INF_Tools_library.cmd */
　　if ( #ファイルサイズ( &INFmLibraryName )  < 0 .and #バージョン番号 >= 10 )
　　　&INFmLibraryName = #ファイル名( &INFmLibraryName, 5 ) + #ファイル名( &INFmLibraryName, 2 ) + ".cmx"
　　end

　　if ( #ファイルサイズ( &INFmLibraryName ) > 0 )
　　　ライブラリ　&INFmLibraryName

　　　if　( #バージョン番号 >= 10 )
　　　　if　( #配列要素数( "INFmKnjForm" ) = -1 )
　　　　　変数宣言　局所，整数｛ &INFmKnjForm ｝

　　　　　** Rev.143 2015.07.08 オブジェクト操作コマンド　@ﾌｫｰﾑ 等を変数指定に変更
　　　　　エラー処理　手続き名 = "INFprcOnErrorEventFormBeginON"
　　　　　オブジェクト操作　@ﾌｫｰﾑ｛ ﾌｫｰﾑ開始 = 1 ｝
　　　　　エラー処理　/* 解除を忘れずに */
　　　　else
　　　　　条件　( #変数( "INFmKnjForm" )      )　オブジェクト操作　@フォーム｛ ﾌｫｰﾑ開始 = 1 ｝ /* 全角のフォーム */
　　　　　条件　( .not #変数( "INFmKnjForm" ) )　オブジェクト操作　@ﾌｫｰﾑ｛ ﾌｫｰﾑ開始 = 1 ｝     /* 半角のフォーム */
　　　　end

　　　else  /* 桐9-2012 / 桐9s */
　　　　オブジェクト操作　@ﾌｫｰﾑ｛ ﾌｫｰﾑ開始 = 1 ｝ /* 半角のフォーム */
　　　end
　　else
　　　&INFmLive = 0, &INFmLibraryName = "ライブラリが見つかりません\n\nフォルダ： " +  #文字置換( #ファイル名( &INFmLibraryName, 5), "\", "\\" ) + "\n\nファイル： " + #文字置換( #ファイル名( &INFmLibraryName, 3), "\", "\\" )
　　　メッセージボックス　"INF Framework　名札 メイン", &INFmLibraryName + "\n\nコメント： INF Framework は停止しました", ｱｲｺﾝ=i, ﾎﾞﾀﾝ指定=1, 制御文字展開 = する
　　end
　　*---------- end   INF Framework Library Load ---------------*
　end
　if ( #変数( "INFmLive" ) )
　　*---------- begin Handle Variable Define and Store ---------------*
　　**変数宣言　局所，整数　｛ &HDLVARmOkOnly = 1 ｝/* ＯＫのみのダイアログボックスとして動作、[×][Esc][閉じる]等が[ＯＫ]と同等になる。但し exit の値は -1 */
　　変数宣言　局所，文字列｛ &HDLVARmStoreParameter, &HDLVARmReturnParameter, &HDLVARmProcedureParameter, &HDLVARmDefineVariableList, &HDLVARmReturnVariableList, &HDLVARmSendProcedureName, &HDLVARmVarType, &HDLVARmVarMacro, &HDLVARmVarStoreMacro, &HDLVARmReferWfmFileName ｝
　　変数宣言　局所，整数　｛ &HDLVARmReferWfmHdl, &HDLVARmVarCount, &HDLVARmVarDim, &HDLVARmExitButtonUse ｝
　　手続き実行　HDLVARprcReferWfmHdlGet( &HDLVARmReferWfmFileName, &HDLVARmReferWfmHdl )
　　if ( #ウィンドウハンドル( &HDLVARmReferWfmHdl ) )　/* 呼び出し元フォームのウィンドウが存在すれば… */
　　　手続き実行　HDLVARprcParameterGet( )
　　　if ( #trim( &HDLVARmDefineVariableList, 4 ) )
　　　　手続き実行　HDLVARprcVarParameterReform( &HDLVARmDefineVariableList )
　　　　&HDLVARmVarCount = 1
　　　　繰り返し　( &HDLVARmVarCount )
　　　　　手続き実行　HDLVARprcMacroVarRun( &HDLVARmReferWfmHdl, &HDLVARmDefineVariableList, &HDLVARmVarCount, &HDLVARmVarType, &HDLVARmVarMacro, &HDLVARmVarStoreMacro, &HDLVARmVarDim )
　　　　　条件　( &HDLVARmVarMacro　　　)　コマンド　&HDLVARmVarMacro
　　　　　条件　( &HDLVARmVarStoreMacro )　手続き実行　HDLVARprcMacroStoreRun( &HDLVARmVarStoreMacro, &HDLVARmVarDim )
　　　　繰り返し終了
　　　end
　　　&HDLVARmProcedureParameter = #u　/* Rev.111 2013.06.15 名札メイン　&HDLVARmProcedureParameter をクリア */
　　end
　　*---------- end   Handle Variable Define and Store ---------------*
　　*---------- begin INF Framework Variable Define ---------------*
　　**第 3.0 版で廃止された変数　変数宣言　局所，文字列｛ &INFmDataTypeEvalObjectName = "INFtxtCommon" ｝ /* *_info.txt を読み込む時に使用するﾃｷｽﾄｵﾌﾞｼﾞｪｸﾄ名 ｵﾌﾞｼﾞｪｸﾄ名は任意 */
　　変数宣言　局所，文字列｛ &INFmSaveVariableNameList        ｝/* 第 2.1 版で追加された局所変数 *_info.txt に値を保存する変数名 変数名を半角コンマで区切った文字列 */
　　変数宣言　局所，整数　｛ &EZWmFieldMagnification          ｝/* 行の高さを記憶                                                                       */
　　**変数宣言　局所，整数｛ &EZWmNoFieldLockSave         = 1 ｝/* &INFmSaveVariableNameList の中の &EZWmFieldLock を保存しない                         */
　　**変数宣言　局所，整数｛ &LNCmNoCommandButtonUse      = 1 ｝/* ランチャー機能でフォームを開く時に INFcmdCommon を使わない                           */
　　**変数宣言　局所，整数｛ &EZWmSeparatorPointWidth     = 8 ｝/* キャプションでマウスカーソルを左右矢印にする範囲　単位は point                       */
　　**変数宣言　局所，整数｛ &INFmWindowNoLocate          = 1 ｝/* フォームの位置を復元しない                                                           */
　　**変数宣言　局所，整数｛ &INFmWindowNoResize          = 1 ｝/* フォームのサイズを復元しない                                                         */
　　**変数宣言　局所，整数｛ &INFmWindowNoZoom            = 1 ｝/* フォームの倍率を復元しない                                                           */
　　変数宣言　局所，文字列｛ &INFmTraceModuleNameList = "xTIMER,xALL"    ｝/* 第 3.0 版で追加された局所変数 トレース出力するモジュール名 ALL,INF,EZW,UTLSORT,TIMER */
　　変数宣言　局所，整数　｛ &INFmTraceFormPathAdd    = 0     ｝/* 第 3.0 版で追加された局所変数 トレース出力のフォーム名にパス名を付ける               */
　　変数宣言　局所，整数　｛ &INFmInchToDot = #u              ｝/* Rev.89 以降では値は自動的に取得するので未定義値のままでＯＫ                          */
　　変数宣言　局所，文字列｛ &INFmMyWsUserName, &INFmMyTblinfo, &INFmMyAlias = #u, &INFmCmdStartupObjList ｝
　　変数宣言　局所，整数　｛ &INFmWsUserNameUse = 0, &INFmTblNameUse = 0, &INFmContorlChrUse ｝
　　** INF var
　　変数宣言　局所，文字列｛ &INFmMyWfmName, &INFmMyWfmPath, &INFmMyWinType, &INFmMyWfmType, &INFmTimerSecondaryStatusDefault, &INFmOnErrorInfoReadMsg, &INFmMyWfmMagnification，&INFmMyKevName, &INFmMyInfoName ｝
　　変数宣言　局所，整数　｛ &INFmMyTblNum, &INFmOnErrorWindowSizeSet, &INFmOnErrorInfoRead, &INFmOnStartupCmdObjUse, &INFmMyWinMinimize, &INFmMyWinMaximize, &INFmMyWinMaximizeSave = 0, &INFmEZWidthUse = 0, &INFmMyWfmLinesDefault, &INFmIsMyTbl ｝
　　変数宣言　局所，長整数｛ &INFmTimerSecondaryIntervalDefault ｝　/* Rev.126 2014.12.26 名札メイン &INFmTimerSecondaryIntervalDefault を 整数型 → 長整数型 に変更 */
　　変数宣言　局所，数値　｛ &INFmMyWinPos[2], &INFmMyWinSize[2] ｝
　　変数宣言　局所，文字列｛ &INFmMacro ｝　　         /* 第 2.1 版で追加された局所変数 */
　　変数宣言　局所，整数　｛ &INFmOnMacro          ｝　/* 第 2.1 版で追加された局所変数 */
　　変数宣言　局所, 整数　｛ &INFmModalControl = 1 ｝　/* 第 3.0 版で追加された局所変数 */
　　** EZW var
　　変数宣言　局所，文字列｛ &EZWmRecScrollBar, &EZWmWfmEdge, &EZWmMarkerHead, &EZWmMarkerBody, &EZWmMarkerFoot, &EZWmFieldName, &EZWmCaptionName, &EZWmSeparatorName, &EZWmMoveFieldList, &EZWmMoveCaptionList, &EZWmRedrawSection, &EZWmVariableField = "EZWmFieldList", &EZWmVariableCaption = "EZWmCaptionList",  &EZWmVariableLink = "EZWmLinkList", &EZWmTargetFieldListName, &EZWmFieldList1, &EZWmCaptionList1, &EZWmSeparatorHead, &EZWmSeparatorBody, &EZWmSeparatorFoot, &EZWmLinkList1, &EZWmClickedObjName, &EZWmReadFieldList1, &EZWmKeyDownStatusDefault, &EZWmSystemKeyDownStatusDefault, &EZWmFamilyEZW, &EZWmFamilyFLD, &EZWmFamilyCAP, &EZWmCaptionExtendList, &EZWmCaptionOffsetList, &EZWmMarkerColor, &EZWmLockCaptionColor ｝
　　変数宣言　局所，文字列｛ &EZWmFieldList2, &EZWmCaptionList2 ｝　/* EZW+用のサブ定義リストの変数　末尾Ｎは 2 から 連続する整数：&EZWmFieldListＮ と &EZWmCaptionListＮ  */
　　** Rev.89 使用頻度が低いので３～６の変数を削除　変数宣言　局所，文字列｛ &EZWmFieldList3, &EZWmCaptionList3, &EZWmFieldList4, &EZWmCaptionList4, &EZWmFieldList5, &EZWmCaptionList5, &EZWmFieldList6, &EZWmCaptionList6 ｝
　　変数宣言　局所，整数　｛ &EZWmIsSeparatorHead, &EZWmIsSeparatorBody, &EZWmIsSeparatorFoot, &EZWmIsMarkerHead, &EZWmIsMarkerBody, &EZWmIsMarkerFoot, &EZWmDoubleClick = 0, &EZWmMouseMove, &EZWmFieldLock = 0, &EZWmIsFamilyEZW, &EZWmIsFamilyFLD, &EZWmIsFamilyCAP, &EZWmFieldLive, &EZWmDebugSeparatorAppear = 0 ｝
　　変数宣言　局所，数値　｛ &EZWmMagnification = 100, &EZWmReadMagnification, &EZWmFieldWidth, &EZWmFieldPosX, &EZWmMousePosX, &EZWmMarkerPosX, &EZWmWfmWidth, &EZWmBorderPosX, &EZWmBorderless = 1, &EZWmMarkerWidth = 20, &EZWmIntervalDoubleClickSecond, &EZWmFieldHomePosX, &EZWmFieldHeightDefault, &EZWmExtendWidth ｝
　　変数宣言　局所，日時　｛ &EZWmClickedObjDate ｝
　　変数宣言　局所，時間　｛ &EZWmIntervalDoubleClickDefault =　i"0時間 0分 0.8秒", &EZWmIntervalDoubleClick ｝
　　** EZW var　第 2.1 版で追加された変数
　　変数宣言　局所，整数　｛ &EZWmFieldMouseDownLast ｝
　　** FLD var
　　変数宣言　局所，文字列｛ &EZWmFocusField, &EZWmFocusFieldLast, &EZWmFieldWidthList, &EZWmFieldStackList, &EZWmFieldStatusList ｝
　　変数宣言　局所，整数　｛ &EZWmOnFieldFocusGet, &EZWmOnFieldFocusReset, &EZWmFieldMouseDown ｝
　　変数宣言　局所，長整数｛ &EZWmRecNow, &EZWmRecFocus ｝
　　** LNC var　第 2.1 版で追加された変数
　　変数宣言　局所，文字列｛ &LNCmModuleName, &LNCmOnErrorMsg, &LNCmOpenPathName ｝
　　変数宣言　局所，整数　｛ &LNCmOnError, &LNCmMyWinMinimize = 0, &LNCmWindowFoundMyWinMinimize = 0, &LNCmOpenPathLock = 0, &LNCmKiriVariableUse = 0 ｝
　　** 廃止された変数（旧LNC機能）　変数宣言　局所，整数　｛ &LNCmTblClose = 0, &LNCmPopupToChild = 0, &LNCmModeZero = 0 ｝
　　** HDLSEL var　第 2.1 版で追加された変数
　　変数宣言　局所，文字列｛ &HDLSELmSelectFileName, &HDLSELmWfmFileName, &HDLSELmTblFileName, &HDLSELmAction ｝
　　変数宣言　局所，整数　｛ &HDLSELmTargetHdlNum, &HDLSELmOnHdlSet, &HDLSELmTblInfoAdd = 1 ｝
　　** HDLCOM var　第 2.1 版で追加された変数
　　変数宣言　局所，文字列｛ &HDLCOMmSendMacro, &HDLCOMmReceiveMacro ｝
　　変数宣言　局所，整数　｛ &HDLCOMmOnMacro, &HDLCOMmReceiveReady = 1 ｝
　　** UTLSORT var　第 2.1 版で追加された変数
　　変数宣言　局所，整数　｛ &UTLSORTmLive = 1 ｝　/* 「項目ソート」機能を有効にする Yes:1 No:0 */
　　if ( #変数( "UTLSORTmLive" ) )
　　　変数宣言　局所，文字列｛ &UTLSORTmSortParameter, &UTLSORTmButton, &UTLSORTmClickObjectNow, &UTLSORTmClickObjectLast ｝ /* &UTLSORTmPrefixList */
　　　変数宣言　局所，整数　｛ &UTLSORTmKeep, &UTLSORTmSize, &UTLSORTmPos, &UTLSORTmRun, &UTLSORTmDictionaryOrder ｝
　　end
　　** UTLFLD var　第 3.1 版で追加された変数
　　変数宣言　局所，整数　｛ &UTLFLDmTextSelect = 1 ｝ /* 桐ver.9以降：famFLD::編集開始( )で［編集選択位置設定］メソッドを実行する */
　　*---------- end   INF Framework Variable Define ---------------*
　end
　*---------- end   INF Framework 名札 メイン ---------------*
　条件 ( #変数( "INFmLive" ) )　&INFmTblNameUse = 1 /* IPS_form */
　**---------- <end   標準 INF Framework 第3.3版 名札 メイン> ---------------**

　*---------- begin *_info.txt の設定 -----------------*
　if ( #ウィンドウハンドル( #変数( "HDLVARmReferWfmHdl" ) ) )　/* 呼び出し元フォームのウィンドウが存在すれば… */
　　&INFmTblNameUse = 1
　　** &INFmMyAlias = &mExecuteMode + "(" + #ファイル名( &HDLVARmReferWfmFileName, 2 ) + ")" + #trim( &mTitlebarMsg, 4 )
　　&INFmMyAlias = "HDLVAR" + "(" + #ファイル名( &HDLVARmReferWfmFileName, 2 ) + ")"
　end
　*---------- end *_info.txt の設定 -----------------*

　if ( #変数( "INFmLive" ) .and #変数( "FSCmUse" ) )

　　変数宣言　局所，文字列｛ &mModalFormColorBak ｝
　　&mModalFormColorBak = &FSCmModalFormColor      /* モーダルのカラーをバックアップする */

　end


＊
*■*----------------------------------------------------------------------------------------------
*■*-----------------------　　　　　   　各手続き機能
*■*----------------------------------------------------------------------------------------------
手続き定義開始　ﾌｫｰﾑ::ﾌｫｰﾑ開始(長整数　&表番号)
    変数宣言　自動，文字列｛ &icon , &title = "ﾌｫｰﾑ::ﾌｫｰﾑ開始( )", &msg ｝
    変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
    変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
    条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

    *---------- begin MNU Tools ﾌｫｰﾑ::ﾌｫｰﾑ開始 ---------------*
    **if　( #変数( "MNUmLive" ) )
    条件　( #変数( "MNUmLive" ) )　手続き実行　MNUprcEventFormBeginRun( )
    **end
    *---------- end MNU Tools ﾌｫｰﾑ::ﾌｫｰﾑ開始 -----------------*

　*---------- begin INF Framework ﾌｫｰﾑ::ﾌｫｰﾑ開始 ---------------*
　**if　( #変数( "INFmLive" ) )
　条件　( #変数( "INFmLive" ) )　手続き実行　INFprcEventFormBeginRun( &表番号 )
　**end
　*---------- end INF Framework ﾌｫｰﾑ::ﾌｫｰﾑ開始 -----------------*

　&mFormWidthDefault = 220
　&mFormWidthExtend  = 380
　変数宣言　自動，数値　｛ &width, &twips = 20 ｝
　&width = &mFormWidthDefault * &twips
　オブジェクト操作　@ﾌｫｰﾑ｛ ﾌｫｰﾑの幅 = &width ｝

　&mReiwaFirstDateString = #日時文字列( #日時値( "2019/05/01" ), 3, 1, 2 )  /* 3:平成14年 7月25日 ( 13時23分45秒 ) 1: 日まで 2: ゼロ詰め */
　手続き実行　prcReiwaSupportTest( &mReiwaFirstDateString, &mIsReiwaSupported )
　手続き実行　prc祝日データの初期化( )
　手続き実行　prcDimensionsSet( &mDimensions )

　** 2019.04.03 #年( #年月日 ), #月( #年月日 ) は ＮＧ
　**条件　( &traceON )　トレース出力　" 手続き実行　prcCalendarDraw( #年( #年月日 ), #月( #年月日 ) )"
　**条件　( &traceON )　トレース出力　" #年( #年月日 ) = " + #str( #年( #年月日 ) )
　**条件　( &traceON )　トレース出力　" #月( #年月日 ) = " + #str( #月( #年月日 ) )
　**手続き実行　prcCalendarDraw( #年( #年月日 ), #月( #年月日 ) )

　条件　( &traceON )　トレース出力　" #年( #日時値 ) = " + #str( #年( #日時値 ) )
　条件　( &traceON )　トレース出力　" #月( #日時値 ) = " + #str( #月( #日時値 ) )
　手続き実行　prcCalendarDraw( #年( #日時値 ), #月( #日時値 ) )

　if ( &mPublicHolidayVisible )

　　**手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )
　　手続き実行　prcPublicHolidayVisible( )

　　**　&macro     = "手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )"
　　**　&INFmMacro = &macro
　　**　手続き実行　INFprcTimerSecondaryON( "&INFmOnMacro", 50 )
　end

　if　( #バージョン番号 >= 10 .and #lc2( #ファイル名( &INFmLibraryName, 4 ) ) = "cmx" )
　　手続き実行　INFCNVprcStringExtensionConv( &mYearMonthGetWfm )
　　手続き実行　INFCNVprcStringExtensionConv( &mDatePickerOptionWfm )
　end

　&mModeHDLVAR = 0
　if ( #ウィンドウハンドル( &HDLVARmReferWfmHdl ) )　/* 呼び出し元フォームのウィンドウが存在すれば… */
　　&mModeHDLVAR = 1

　　手続き実行　HDLVARprcキャンセルボタン機能変更( )

　　オブジェクト操作　@chkmClipboardCopy｛ 画面表示 = 0 ｝
　　オブジェクト操作　@txt変数名A｛        画面表示 = 0 ｝
　　オブジェクト操作　@txt変数名B｛        画面表示 = 0 ｝

　　if　( #変数( "WIDGETmLive" ) )
　　　オブジェクト操作　@FSCtxtPaletteColorName｛ 画面表示 = 0 ｝

　　　変数宣言　自動，文字列｛ &objectName, &dataType ｝

　　　&objectName = #局所変数( &HDLVARmReferWfmHdl, "EZWmFocusField" )
　　　オブジェクト操作　ハンドル = &HDLVARmReferWfmHdl, &objectName｛ &dataType = ﾃﾞｰﾀ型 ｝
　　　&mWidgetFieldDataType = &dataType
　　　*トレース出力　&title, "   ", _&objectName, "   ", _&dataType

　　end

　end

　if ( #変数( "VKmLive" ) )

　　手続き実行　prcKeySetDefault( )

　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了
*■*----------------------------------------------------------------------------------------------
*■*-----------------------　　　　　   　
*■*----------------------------------------------------------------------------------------------


手続き定義開始　chkmPublicHolidayVisible::ｿｰｽ値更新()
　変数宣言　自動，文字列｛ &icon, &title = "chkmPublicHolidayVisible::ｿｰｽ値更新( )", &msg ｝
　変数宣言　自動，整数　｛ &year, &month ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　if ( &mPublicHolidayVisible )

　　**手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )
　　手続き実行　prcPublicHolidayVisible( )
　else

　　&year  = #年( &mBeginningOfMonthDate )
　　&month = #月( &mBeginningOfMonthDate )
　　手続き実行　prcCalendarDraw( &year, &month )
　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　famDay::ﾏｳｽｲﾝｱｳﾄ(長整数　&フラグ，長整数　&明細番号)
　変数宣言　自動，文字列｛ &icon, &title = "famDay::ﾏｳｽｲﾝｱｳﾄ( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName ｝
　変数宣言　自動，整数　｛ &ON = 1, &OFF = 0, &mode = 0 ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：長整数　&フラグ = " + #str( &フラグ )

　&objectName = &this
　条件　( &traceON )　トレース出力　" &objectName = " + &objectName
　if ( &mDayObjectSelectNow <> &objectName )

　　if ( &フラグ )

　　　条件　( &traceON )　トレース出力　" 手続き実行　MNUprcMenuTitleLevel( &hwindow, &objectName,  &ON,  &mode )"
　　　手続き実行　MNUprcMenuTitleLevel( &hwindow, &objectName,  &ON,  &mode )

　　else

　　　条件　( &traceON )　トレース出力　" 手続き実行　MNUprcMenuTitleLevel( &hwindow, &objectName, &OFF, &mode )"
　　　手続き実行　MNUprcMenuTitleLevel( &hwindow, &objectName, &OFF, &mode )

　　end
　end

　変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　メソッド呼び出し　&formObjectName.変数変更()

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　famDay::ﾏｳｽ左ｸﾘｯｸ(長整数　&マウス位置[2]，長整数　&明細番号，長整数　&フラグ，参照　長整数　&処理中止)
　変数宣言　自動，文字列｛ &icon, &title = "famDay::ﾏｳｽ左ｸﾘｯｸ( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName ｝
　変数宣言　自動，文字列｛ &macro ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&objectName = &this
　if ( &mAliasThis <> #u )
　　条件　( &traceON )　トレース出力　" &mAliasThis           = " + &mAliasThis
　　&objectName = &mAliasThis
　　&mAliasThis = #u
　end

　条件　( &traceON )　トレース出力　" if ( &objectName <> &mDayObjectSelectNow ) … " + #str( ( &objectName <> &mDayObjectSelectNow ) )
　if ( &objectName <> &mDayObjectSelectNow )


　　&mDayObjectSelectLast = &mDayObjectSelectNow
　　&mDayObjectSelectNow  = &objectName
　　&mDayObjectExit       = &objectName
　　条件　( &traceON )　トレース出力　" &mDayObjectSelectLast = " + &mDayObjectSelectLast
　　条件　( &traceON )　トレース出力　" &mDayObjectSelectNow  = " + &mDayObjectSelectNow
　　条件　( &traceON )　トレース出力　" &mDayObjectExit       = " + &mDayObjectExit

　　if ( &objectName = &mDayObjectToday )
　　　オブジェクト操作　&objectName｛ 背景ﾓｰﾄﾞ = "指定色", 背景色 = "青磁色" ｝
　　else
　　　オブジェクト操作　&objectName｛ 背景ﾓｰﾄﾞ = "継承" ｝
　　end
　　オブジェクト操作  &objectName｛ 境界線ﾓｰﾄﾞ = "角丸め" ｝
　　オブジェクト操作  &objectName｛ 上罫線の太さ = "細線", 上罫線の種類 = "実線", 上罫線の色 = "青" }
　　条件　( &traceON )　トレース出力　" &mDayObjectSelectNow  = " + &objectName + " を 角丸め にセット"

　　if ( &mDayObjectSelectLast <> #u )
　　　&objectName = &mDayObjectSelectLast
　　　オブジェクト操作　&objectName｛ 境界線ﾓｰﾄﾞ = "囲み罫線", 左罫線の太さ = "なし", 左罫線の種類 = "実線", 左罫線の色 = "黒", 上罫線の太さ = "なし", 上罫線の種類 = "実線", 上罫線の色 = "黒" }
　　　オブジェクト操作　&objectName｛ 右罫線の太さ = "なし", 右罫線の種類 = "実線", 右罫線の色 = "黒", 下罫線の太さ = "なし", 下罫線の種類 = "実線", 下罫線の色 = "黒" }
　　　条件　( &traceON )　トレース出力　" &mDayObjectSelectLast = " + &objectName + " を 囲み罫線 にセット"
　　end
　end

　&macro = "手続き実行　HDLVARprcFormExit( &mDayObjectExit )"
　条件　( &traceON )　トレース出力　" &macro = " + &macro
　条件　( &traceON )　トレース出力　" 手続き実行　INFprcDoubleClickEval( &mDayObjectExit, &macro )"
　** ＮＧ：&mAliasThis を使用するので &this は使えない 2018.07.29 手続き実行　INFprcDoubleClickEval( &this, &macro )
　手続き実行　INFprcDoubleClickEval( &mDayObjectExit, &macro )

　変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　メソッド呼び出し　&formObjectName.変数変更()

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　famDimensions::ｿｰｽ値更新()
　変数宣言　自動，文字列｛ &icon, &title = "famDimensions::ｿｰｽ値更新( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" &mDimensions = " + #str( &mDimensions )
　手続き実行　prcDimensionsSet( &mDimensions )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　famPaddingType::ｿｰｽ値更新()
　変数宣言　自動，文字列｛ &icon, &title = "famPaddingType::ｿｰｽ値更新( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　手続き実行　prc日時文字列形式Draw( )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　txt変数名A::入力前(参照　文字列　&編集文字列)

　&mVriableListUse = 0
　&m編集文字列 = &編集文字列

手続き定義終了

手続き定義開始　txt変数名A::入力後(参照　文字列　&編集文字列，長整数　&モード，参照　長整数　&入力継続)

　if ( &mVriableListUse = 0 )
　　&編集文字列 = &m編集文字列
　end

手続き定義終了

手続き定義開始　txt変数名A入力支援ﾎﾞﾀﾝ::入力支援ｸﾛｰｽﾞ(参照　文字列　&入力文字列，長整数　&モード)

　if (  &モード )
　　&mVriableListUse = 1
　end

手続き定義終了

手続き定義開始　txt変数名B::入力前(参照　文字列　&編集文字列)

　&mVriableListUse = 0
　&m編集文字列 = &編集文字列

手続き定義終了

手続き定義開始　txt変数名B::入力後(参照　文字列　&編集文字列，長整数　&モード，参照　長整数　&入力継続)

　if ( &mVriableListUse = 0 )
　　&編集文字列 = &m編集文字列
　end

手続き定義終了

手続き定義開始　txt変数名B入力支援ﾎﾞﾀﾝ::入力支援ｸﾛｰｽﾞ(参照　文字列　&入力文字列，長整数　&モード)

　if (  &モード )
　　&mVriableListUse = 1
　end

手続き定義終了

手続き定義開始　cmdMonthMoveClick( 文字列 &parameter, 日時 &beginningOfMonthDate )
　変数宣言　自動，文字列｛ &icon, &title = "cmdMonthMoveClick( )", &msg ｝
　変数宣言　自動，文字列｛ &macro ｝
　変数宣言　自動，整数　｛ &year, &month ｝
　変数宣言　自動，日時　｛ &modifyBeginningOfMonthDate ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：文字列 &parameter = " + &parameter
　条件　( &traceON )　トレース出力　" 引数：日時   &parameter = " + #str( &beginningOfMonthDate )

　if ( &parameter = "up" )
　　&modifyBeginningOfMonthDate = #月数加算( &beginningOfMonthDate, -1, 1 )
　else
　　&modifyBeginningOfMonthDate = #月数加算( &beginningOfMonthDate, +1, 1 )
　end
　&year  = #年( &modifyBeginningOfMonthDate )
　&month = #月( &modifyBeginningOfMonthDate )

　&msg =            "引数：文字列 &parameter            = " + &parameter
　&msg = &msg + "\n\n引数：日時   &beginningOfMonthDate = " + #日時文字列( &beginningOfMonthDate, 11, 0, 2 )
　&msg = &msg + "\n\n&modifyBeginningOfMonthDate = " + #日時文字列( &modifyBeginningOfMonthDate, 11, 0, 2 )
　&msg = &msg + "\n\n&year  = " + #str( &year )
　&msg = &msg + "\n\n&month = " + #str( &month )
　&icon = "i"
　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　手続き実行　prcCalendarDraw( &year, &month )

　if ( &mPublicHolidayVisible )
　　**&macro     = "手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )"
　　&macro     = "手続き実行　prcPublicHolidayVisible( )"
　　&INFmMacro = &macro
　　手続き実行　INFprcTimerSecondaryON( "&INFmOnMacro", 25 )
　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmdStartupClick( )
　変数宣言　自動，文字列｛ &icon, &title = "cmdStartupClick( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　変数宣言　自動，整数　｛ &return ｝
　メソッド呼び出し　戻り値 = &return, @HDLVARcmdOK.フォーカス設定( )
　条件　( &traceON )　トレース出力　" メソッド呼び出し　戻り値 = &return, @HDLVARcmdOK.フォーカス設定( )"
　条件　( &traceON )　トレース出力　" &return = " + #str( &return )

　if ( #変数( "WIDGETmLive" )  )

　　if ( &WIDGETmSendDate <> #u )

　　　手続き実行　prcCalendarDraw( #年( &WIDGETmSendDate ), #月( &WIDGETmSendDate ) )
　　　if ( &mPublicHolidayVisible )
　　　　手続き実行　prcPublicHolidayVisible( )
　　　end

　　　&objectName = "lblDay_" + #str( &mDayNumber + #日( &WIDGETmSendDate ) - 1 )
　　　&mAliasThis = &objectName
　　　手続き実行　famDay::ﾏｳｽ左ｸﾘｯｸ( &mマウス位置, 1, 1, &m処理中止 )
　　end

　　&msg =            "if ( #変数( ""WIDGETmLive"" ) )"
　　&msg = &msg + "\n\n&WIDGETmSendDate         = " + #日付( &WIDGETmSendDate, 1 )
　　&msg = &msg + "\n\n&mBeginningOfMonthString = " + &mBeginningOfMonthString
　　&msg = &msg + "\n\n&mDayNumber              = " + #str( &mDayNumber )
　　&msg = &msg + "\n\n&mDayNumber + #日        = " + #str( &mDayNumber + #日( &WIDGETmSendDate ) - 1 )
　　&msg = &msg + "\n\nobjectName               = " + &mAliasThis
　　&icon = "i"
　　**手続き実行　INFprcMsgPause( &icon, &title, &msg )
　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmdTestClick( )
　変数宣言　自動，文字列｛ &setString ｝

　&setString = #set( "STR", "あ" )
手続き定義終了

手続き定義開始　 cmdアイテム表示Click( )
　変数宣言　自動，文字列｛ &icon, &title = "cmdアイテム表示Click", &msg ｝
　**変数宣言　自動，文字列｛ &アイテム名配列DIM[ 20 ] ｝
　変数宣言　自動，文字列｛ &titlebarCaption, &operationGuide, &procedureName ｝
　変数宣言　自動，整数　｛ &status ｝
　変数宣言　自動，整数　｛ &modalControl ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&modalControl    = 1
　&titlebarCaption = &title
　&titlebarCaption = "日時文字列の形式"
　** 例：&operationGuide  = "アイテムをクリックしてください"
　&operationGuide  = "日時文字列の形式をクリックしてください"
　&procedureName   = "cmdアイテム表示ClickRETURN"
　**             引数の意味：モーダル       タイトルバー文字  操作ガイド       配列変数名※[]なし  実行手続き名    終了状態※戻り値はINF_MNUがある：1 ない：0
　**手続き実行　HDLAPIprcItem( &modalControl, &titlebarCaption, &operationGuide, &アイテム名配列DIM, &procedureName, &status )
　手続き実行　HDLAPIprcItem( &modalControl, &titlebarCaption, &operationGuide, &m日時文字列関数パラメータDim, &procedureName, &status )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmdアイテム表示ClickRETURN( 整数 &itemMum )
　変数宣言　自動，文字列｛ &icon, &title = "cmdアイテム表示ClickRETURN( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：整数 &itemMum = " + #str( &itemMum )

　&mDateTypeNum = ( &itemMum - 1 )
　条件　( &traceON )　トレース出力　" &mDateTypeNum = " + #str( &mDateTypeNum )

　手続き実行　prc日時文字列形式Draw( )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmd今月Click( )
　変数宣言　自動，文字列｛ &icon, &title = "cmd今月Click( )", &msg ｝
　変数宣言　自動，文字列｛ &macro ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　** 2019.04.03 #年( #年月日 ), #月( #年月日 ) は ＮＧ
　**手続き実行　prcCalendarDraw( #年( #年月日 ), #月( #年月日 ) )
　手続き実行　prcCalendarDraw( #年( #日時値 ), #月( #日時値 ) )

　if ( &mPublicHolidayVisible )
　　**手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )
　　手続き実行　prcPublicHolidayVisible( )
　　**&macro     = "手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )"
　　**&INFmMacro = &macro
　　**手続き実行　INFprcTimerSecondaryON( "&INFmOnMacro", 50 )
　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmd詳細設定Click( )
　変数宣言　自動，文字列｛ &icon, &title = "cmd詳細設定Click( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName, &objectNameList ｝
　変数宣言　自動，文字列｛ &comma = #jis( #hex("2C") ) ｝
　変数宣言　自動，整数　｛ &i, &loop, &step = 1 ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&mOptionpane = .not &mOptionpane

　変数宣言　自動，数値　｛ &width, &twips = 20 ｝
　if ( &mOptionpane )
　　&width = &mFormWidthExtend  * &twips
　　オブジェクト操作　@cmd詳細設定｛ 標題 = "<<" ｝
　else
　　&width = &mFormWidthDefault * &twips
　　オブジェクト操作　@cmd詳細設定｛ 標題 = ">>" ｝
　end
　オブジェクト操作　@ﾌｫｰﾑ｛ ﾌｫｰﾑの幅 = &width ｝

　&objectNameList = "FSCtxtPaletteColorName,cmdアイテム表示,txtmTodayString,chkmPaddingTypeNum0,chkmPaddingTypeNum1,chkmPaddingTypeNum2,chkmPaddingTypeNum3,chkmClipboardCopy" /* ,chkmSTRvariableUse,chkm年月日variableUse */
　&loop = 1 + #文字数( &objectNameList ) - #文字数( #文字置換( &objectNameList, &comma, #u ) )
　繰り返し　&i =1, &loop, &step

　　&objectName = #対応文字列( &objectNameList, &i )
　　条件　( &traceON )　トレース出力　" &objectName = " + &objectName
　　if ( &mOptionpane )
　　　オブジェクト操作　&objectName｛ ﾌｫｰｶｽの設定 = "自動" ｝
　　else
　　　オブジェクト操作　&objectName｛ ﾌｫｰｶｽの設定 = "禁止" ｝
　　end

　繰り返し終了

　if ( &mModeHDLVAR .and &mOptionpane )

　　&objectName = "chkmClipboardCopy"
　　オブジェクト操作　&objectName｛ ﾌｫｰｶｽの設定 = "使用不可表示" ｝

　end

　if ( .not &mOptionpane )
　　変数宣言　自動，整数｛ &return ｝
　　メソッド呼び出し　戻り値 = &return, @HDLVARcmdOK.フォーカス設定( )
　　条件　( &traceON )　トレース出力　" メソッド呼び出し　戻り値 = &return, @HDLVARcmdOK.フォーカス設定( )"
　　条件　( &traceON )　トレース出力　" &return = " + #str( &return )
　　if ( .not &return )

　　　メソッド呼び出し　戻り値 = &return, @HDLVARcmdｷｬﾝｾﾙ.フォーカス設定( )
　　　条件　( &traceON )　トレース出力　" メソッド呼び出し　戻り値 = &return, @HDLVARcmdｷｬﾝｾﾙ.フォーカス設定( )"
　　　条件　( &traceON )　トレース出力　" &return = " + #str( &return )
　　end
　end

　&msg  = "&mOptionpane = " + #str( &mOptionpane )
　&icon = "i"
　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmd年月設定Click( )
　変数宣言　自動，文字列｛ &icon, &title = "cmd年月設定Click( )", &msg ｝
　変数宣言　自動，文字列｛ &wfmFileName, &tblFileName, &procedureName ｝
　変数宣言　自動，整数　｛ &hdl ｝
　変数宣言　自動，文字列｛ &yen = #jis( #hex("5C") ) ｝

　&wfmFileName = &mYearMonthGetWfm
　if ( #ファイルサイズ( &wfmFileName ) > 0 )

　　&mYearNum  = #年( &mStringThisMonth )
　　&mMonthNum = #月( &mStringThisMonth )

　　** &wfmFileName へ渡す：データ型｛ 変数名リスト（コンマ区切り） ｝
　　&HDLVARmStoreParameter = "文字列｛ &mString ｝, 整数｛ &mYearNum, &mMonthNum ｝"

　　** &wfmFileName から受け取る：変数名リスト（コンマ区切り）
　　&HDLVARmReturnParameter = "&mYearNum, &mMonthNum"

　　** 例：&mString = "請求書の日付"
　　&mString       = "移動先の年と月を指定します"
　　&wfmFileName   = &wfmFileName
　　&tblFileName   = #u
　　&procedureName = "cmd年月設定ClickRETURN"
　　**                             引数の意味：モーダル          フォーム       表           実行手続き名    ハンドル※戻り値はモーダル：#u モードレス：ハンドル番号
　　手続き実行　HDLVARprcWindowAppearVarSend( &INFmModalControl, &wfmFileName, &tblFileName, &procedureName, &hdl )

　else

　　&msg =            "ファイルが見つかりません"
　　&msg = &msg + "\n" + #複写( "-", 50 )
　　&msg = &msg + "\n\nフォルダ：" + #文字置換( #ファイル名( &wfmFileName, 5 ), &yen, &yen + &yen )
　　&msg = &msg + "\n\nファイル：" + #ファイル名( &wfmFileName, 3 )
　　&icon = "e"
　　手続き実行　INFprcMsgPause( &icon, &title, &msg )
　end

手続き定義終了

手続き定義開始　cmd年月設定ClickRETURN( 整数 &exit )
　変数宣言　自動，文字列｛ &icon, &title = "cmd年月設定ClickRETURN( )", &msg ｝
　変数宣言　自動，文字列｛ &wfmFileName, &yen = #jis( #hex("5C") ) ｝
　変数宣言　自動，整数　｛ &debug ｝
　変数宣言　自動，整数　｛ &year, &month ｝

　&wfmFileName = &mYearMonthGetWfm
　&debug = 0
　if　( &debug )
　　&msg = 　　　　 　"デバッグ情報"
　　&msg = &msg + "\n\nフォルダ：" + #文字置換( #ファイル名( &wfmFileName, 5 ), &yen, &yen + &yen )
　　&msg = &msg + "\n\nファイル：" + #ファイル名( &wfmFileName, 3 )
　　&msg = &msg + "\n\n※" + #cond( &exit = 1, "[ＯＫ]", &exit = 2, "[適用]", 1, "[ｷｬﾝｾﾙ]/[×]" ) + "ボタンを実行しました"
　　&msg = &msg + "\n\n&exit = " + #str( &exit )
　　&icon = "i"
　　手続き実行　INFprcMsgPause( &icon, &title, &msg )
　end

　if　( &exit )　/* &exit が 1(ＯＫ) または 2(適用) */

　　**[ＯＫ]または[適用]の場合の処理

　　&msg =            "&mYearNum  = " + #str( &mYearNum  )
　　&msg = &msg + "\n\n&mMonthNum = " + #str( &mMonthNum )
　　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　　** 1900≦Year≦2099
　　if ( &mYearNum >= 1900 .and &mYearNum <= 2099 .and &mMonthNum >= 1 .and &mMonthNum <= 12 )

　　　&year  = &mYearNum
　　　&month = &mMonthNum
　　　手続き実行　prcCalendarDraw( &year, &month )
　　　if ( &mPublicHolidayVisible )
　　　　**手続き実行　prcPublicHolidayVisible( &mPublicHolidayVisible )
　　　　手続き実行　prcPublicHolidayVisible( )
　　　end

　　else

　　　&msg =            "年は 1900 ～ 2099 月は 1 ～ 12 の範囲を指定してください"
　　　&msg = &msg + "\n\n&mYearNum  = " + #str( &mYearNum  )
　　　&msg = &msg + "\n\n&mMonthNum = " + #str( &mMonthNum )
　　　&icon = "e"
　　　手続き実行　INFprcMsgPause( &icon, &title, &msg )
　　end

　else　/* &exit が 0(ｷｬﾝｾﾙ・×) */

　　**[ｷｬﾝｾﾙ]または[×]の場合の処理

　end

手続き定義終了

手続き定義開始　HDLVARprcFormExit( 文字列 &objectName )
　変数宣言　自動，文字列｛ &icon, &title = "HDLVARprcFormExit( )", &msg ｝
　変数宣言　自動，文字列｛ &string ｝
　変数宣言　自動，文字列｛ &setString ｝
　変数宣言　自動，整数　｛ &i, &status ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：文字列 &objectName = " + &objectName

　** コマンドボタン：HDLVARcmdOK と ダブルクリック( famDay::ﾏｳｽ左ｸﾘｯｸ ) から呼び出される
　** コマンドボタン：HDLVARcmdOK
　** 機能名：手続き実行　HDLVARprcFormExit, &mDayObjectExit
　**
　** ダブルクリック( famDay::ﾏｳｽ左ｸﾘｯｸ ) から呼び出される
　** &macro = "手続き実行　HDLVARprcFormExit( &mDayObjectExit )"
　** 手続き実行　INFprcDoubleClickEval( &mDayObjectExit, &macro )

　&i = #num( &objectName )

　&string = #日時文字列( #日時値( &mDayString[ &i ] ), &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum )
　条件　( &traceON )　トレース出力　" &string = " + &string

　手続き実行　prcDateReiwaConvert( &string )
　条件　( &traceON )　トレース出力　" prcDateReiwaConvert( &string ) = " + &string

　** 2019.09.27 Rev.1 任意の組み込み変数へ代入するように変更した
　**** begin &STRを使用する
　**条件　( &traceON )　トレース出力　" if ( &mSTRvariableUse ) … " + #str( ( &mSTRvariableUse ) )
　**if ( &mSTRvariableUse )
　**
　**&STR = #日時文字列( #日時値( &mDayString[ &i ] ), &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum )
　**条件　( &traceON )　トレース出力　" &STR    = " + &STR
　**end
　**** end   &STRを使用する

　** 2019.09.27 Rev.1 任意の組み込み変数へ代入するように変更した
　**** begin &年月日を使用する
　**条件　( &traceON )　トレース出力　" if ( &m年月日variableUse ) … " + #str( ( &m年月日variableUse ) )
　**if ( &m年月日variableUse )
　**
　**&年月日 = &string
　**条件　( &traceON )　トレース出力　" &年月日 = " + &年月日
　**end
　**** end   &年月日を使用する

　if ( &mModeHDLVAR )
　　** &HDLVARmReturnParameter = "&mDateString, &mDateTime, &mYearNum, &mMonthNum, &mDayNum"

　　** &string は、prcDateReiwaConvert( &string ) で変換している場合がある
　　&mDateString = &string
　　if ( #変数( "WIDGETmLive" ) .and .not &mIsReiwaSupported .and &mWidgetFieldDataType = "日時" )
　　　&mDateString = #日時文字列( #日時値( &mDayString[ &i ] ), &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum )
　　end
　　&mDateTime   = #日時値( #日時文字列( #日時値( &mDayString[ &i ] ), &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum ) )
　　&mYearNum    = #年( &mDateTime )
　　&mMonthNum   = #月( &mDateTime )
　　&mDayNum     = #日( &mDateTime )
　　条件　( &traceON )　トレース出力　" &mDateString = " + #str( &mDateString )
　　条件　( &traceON )　トレース出力　" &mDateTime   = " + #str( &mDateTime )
　　条件　( &traceON )　トレース出力　" &mYearNum    = " + #str( &mYearNum )
　　条件　( &traceON )　トレース出力　" &mMonthNum   = " + #str( &mMonthNum )
　　条件　( &traceON )　トレース出力　" &mDayNum     = " + #str( &mDayNum )

　else

　　**&STR = #日時文字列( #日時値( &mDayString[ &i ] ), &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum )
　　**&年月日 = &string

　　** 2019.09.27 Rev.1 任意の組み込み変数へ代入するように変更した

　　&setString = #set( &m変数名A, #日時文字列( #日時値( &mDayString[ &i ] ), &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum ) )
　　条件　( &traceON )　トレース出力　" &m変数名A  = " + &m変数名A
　　条件　( &traceON )　トレース出力　" &setString = " + &setString
　　&setString = #set( &m変数名B, &string )
　　条件　( &traceON )　トレース出力　" &m変数名B  = " + &m変数名B
　　条件　( &traceON )　トレース出力　" &setString = " + &setString

　　** begin クリップボードへコピー
　　条件　( &traceON )　トレース出力　" if ( &mClipboardCopy ) … " + #str( ( &mClipboardCopy ) )
　　if ( &mClipboardCopy )

　　　** &string は、prcDateReiwaConvert( &string ) で変換している場合がある
　　　クリップボード　設定, &string, 制御文字変換 = しない,  終了状態 = &status
　　　条件　( &traceON )　トレース出力　" クリップボード　設定, &string, 制御文字変換 = しない,  終了状態 = &status"
　　　条件　( &traceON )　トレース出力　" &status = " + #str( &status )
　　end
　　** end   クリップボードへコピー
　end

　if ( &mModeHDLVAR )

　　手続き実行　HDLVARcmdButtonClick( 1 )
　else

　　条件　( &traceON )　トレース出力　" メソッド呼び出し　@cmd閉じる.実行( )"
　　メソッド呼び出し　@cmd閉じる.実行( )
　　** ＮＧ：2018.07.09 ウィンドウ終了　&hwindow ← ﾌｫｰﾑ終了イベントが発生しない
　end

　** 以下不要：2018.07.10
　** 条件　( &traceON )　トレース出力　" &string = ""メソッド呼び出し　@cmd閉じる.実行( )"""
　** 条件　( &traceON )　トレース出力　" INFprcTimerSecondaryON( ""&INFmOnMacro"", 10 )"
　** &string = "メソッド呼び出し　@cmd閉じる.実行( )"
　** &INFmMacro = &string
　** 手続き実行　INFprcTimerSecondaryON( "&INFmOnMacro", 10 )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　HDLVARprcキャンセルボタン機能変更( )
　変数宣言　自動，文字列｛ &icon, &title = "HDLVARprcキャンセルボタン機能変更( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&objectName = "HDLVARcmdｷｬﾝｾﾙ"
　オブジェクト操作　&objectName｛ \
　　機能名1 = "実行条件"  , 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ1 = "( &HDLVARmReferWfmHdl <> 0 )",\
　　機能名2 = "表示"      , 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ2 = "",\
　　機能名3 = "手続き実行", 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ3 = "HDLVARcmdButtonClick, 0",\
　　機能名4 = "なし"      , 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ4 = "" ｝

　&objectName = "chkmClipboardCopy"
　オブジェクト操作　&objectName｛ ﾌｫｰｶｽの設定 = "使用不可表示" ｝

　** HDLVARcmdOK は変更しない
　** &objectName = "HDLVARcmdOK"
　** オブジェクト操作　&objectName｛ \
　　** 機能名2 = "表示"      , 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ2 = "",\
　　** 機能名3 = "手続き実行", 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ3 = "prcFormExit, &mDayObjectExit",\
　　** 機能名4 = "なし"      , 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ4 = "" ｝
　** ** 機能名1と機能ﾊﾟﾗﾒｰﾀﾘｽﾄ1は変更しない　機能名1 = "実行条件"  , 機能ﾊﾟﾗﾒｰﾀﾘｽﾄ1 = "( &HDLVARmReferWfmHdl <> 0 )"

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　MNUprcMenuTitleLevel( 整数 &hdl, 文字列 &objectName, 整数 &level, 整数 &mode )
　変数宣言　自動，文字列｛ &icon, &title = "MNUprcMenuTitleLevel( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "MNU" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：整数 &hdl          = " + #str( &hdl )
　条件　( &traceON )　トレース出力　" 引数：文字列 &objectName = " + &objectName
　条件　( &traceON )　トレース出力　" 引数：整数 &level        = " + #str( &level )
　条件　( &traceON )　トレース出力　" 引数：整数 &mode         = " + #str( &mode )

　if ( &level )

　　if ( &mode )

　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName.境界線ﾓｰﾄﾞ = "角丸め"

　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 左罫線の太さ = "細線", 左罫線の種類 = "実線", 左罫線の色 = "黒" }
　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 上罫線の太さ = "細線", 上罫線の種類 = "実線", 上罫線の色 = "黒" }
　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 右罫線の太さ = "細線", 右罫線の種類 = "実線", 右罫線の色 = "黒" }
　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 下罫線の太さ = "細線", 下罫線の種類 = "実線", 下罫線の色 = "黒" }
　　else

　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName.境界線ﾓｰﾄﾞ = "囲み罫線"

　　　**オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 左罫線の太さ = "細線", 左罫線の種類 = "実線", 左罫線の色 = "白" }
　　　**オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 上罫線の太さ = "細線", 上罫線の種類 = "実線", 上罫線の色 = "白" }
　　　**オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 左罫線の太さ = "細線", 左罫線の種類 = "実線", 左罫線の色 = "パールグレイ" }
　　　**オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 上罫線の太さ = "細線", 上罫線の種類 = "実線", 上罫線の色 = "パールグレイ" }
　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 左罫線の太さ = "細線", 左罫線の種類 = "実線", 左罫線の色 = "ねずみ色" }
　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 上罫線の太さ = "細線", 上罫線の種類 = "実線", 上罫線の色 = "ねずみ色" }

　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 右罫線の太さ = "細線", 右罫線の種類 = "実線", 右罫線の色 = "チャコールグレイ" }
　　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 下罫線の太さ = "細線", 下罫線の種類 = "実線", 下罫線の色 = "チャコールグレイ" }
　　　**オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 右罫線の太さ = "細線", 右罫線の種類 = "実線", 右罫線の色 = "黒" }
　　　**オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 下罫線の太さ = "細線", 下罫線の種類 = "実線", 下罫線の色 = "黒" }
　　end

　else

　　オブジェクト操作  ﾊﾝﾄﾞﾙ = &hdl, &objectName｛ 境界線ﾓｰﾄﾞ = "囲み罫線", 左罫線の太さ = "なし", 上罫線の太さ = "なし", 右罫線の太さ = "なし", 下罫線の太さ = "なし" }
　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcCalendarDraw( 整数 &year, 整数 &month )
　変数宣言　自動，文字列｛ &icon, &title = "prcCalendarDraw( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName, &dayStringBegin, &dayString, &caption ｝
　変数宣言　自動，整数　｛ &i, &loop, &step = 1 ｝
　変数宣言　自動，文字列｛ &string, &todayString ｝
　変数宣言　自動，文字列｛ &stringLastLastMonth, &stringNextNextMonth, &compareMonth ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：整数 &year  = " + #str( &year )
　条件　( &traceON )　トレース出力　" 引数：整数 &month = " + #str( &month )

　変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　&mTodayDate   = #日時値
　&todayString  = #日時文字列( &mTodayDate, 11, 0, 2 )
　&mTodayString = #日時文字列( &mTodayDate, &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum )
　&mThisMonth   = #月( &mTodayDate )
　&string       = #ファイル名( &INFmMyWfmName, 2 ) + " " + &mTodayString
　**オブジェクト操作　&formObjectName｛ ﾌｫｰﾑ表題 = &string ｝

　手続き実行　prcTitlebarDraw( &mTodayString, &mIs元号 )

　&mDayObjectToday      = #u
　&mDayObjectSelectNow  = #u
　&mDayObjectSelectLast = #u
　&mDayObjectExit       = #u

　**&mBeginningOfMonthDate = #日時値生成( #年( #年月日 ), #月( #年月日 ) )  /* 今月の１日を求めます。*/
　&mBeginningOfMonthDate   = #日時値生成( &year, &month )  /* 今月の１日を求めます。*/
　&mBeginningOfMonthString = #日時文字列( &mBeginningOfMonthDate, 11, 0, 2 )  /* 11 2002- 7-25 ( 13:23:45 ) */
　条件　( &traceON )　トレース出力　_&mBeginningOfMonthDate
　条件　( &traceON )　トレース出力　_&mBeginningOfMonthString

　&mStringThisMonth = #str( #年( &mBeginningOfMonthString ) )                   + "年" + #str( #月( &mBeginningOfMonthString ) )                   + "月"
　&mStringLastMonth = #str( #年( #月数加算( &mBeginningOfMonthDate, -1, 1 ) ) ) + "年" + #str( #月( #月数加算( &mBeginningOfMonthDate, -1, 1 ) ) ) + "月"
　&mStringNextMonth = #str( #年( #月数加算( &mBeginningOfMonthDate, +1, 1 ) ) ) + "年" + #str( #月( #月数加算( &mBeginningOfMonthDate, +1, 1 ) ) ) + "月"
　&stringLastLastMonth       = #str( #年( #月数加算( &mBeginningOfMonthDate, -2, 1 ) ) ) + "年" + #str( #月( #月数加算( &mBeginningOfMonthDate, -2, 1 ) ) ) + "月"
　&stringNextNextMonth       = #str( #年( #月数加算( &mBeginningOfMonthDate, +2, 1 ) ) ) + "年" + #str( #月( #月数加算( &mBeginningOfMonthDate, +2, 1 ) ) ) + "月"

　&mStringThisMonthJPN = #元号日付( &mStringThisMonth + "-1日", 1 )  /* 【 明治 | 大正 | 昭和 | 平成 】 yy年mm月dd日 */
　&mStringLastMonthJPN = #元号日付( &mStringLastMonth + "-1日", 1 )  /* 【 明治 | 大正 | 昭和 | 平成 】 yy年mm月dd日 */
　&mStringNextMonthJPN = #元号日付( &mStringNextMonth + "-1日", 1 )  /* 【 明治 | 大正 | 昭和 | 平成 】 yy年mm月dd日 */
　条件　( &traceON )　トレース出力　" &mStringThisMonthJPN = " + &mStringThisMonthJPN
　条件　( &traceON )　トレース出力　" &mStringLastMonthJPN = " + &mStringLastMonthJPN
　条件　( &traceON )　トレース出力　" &mStringNextMonthJPN = " + &mStringNextMonthJPN

　&mStringThisMonthJPN = #sstr( #trim( #変数( "mStringThisMonthJPN" ), 4 ), 1, #文字位置( #trim( #変数("mStringThisMonthJPN" ), 4 ), "月" ) )
　&mStringLastMonthJPN = #sstr( #trim( #変数( "mStringLastMonthJPN" ), 4 ), 1, #文字位置( #trim( #変数("mStringLastMonthJPN" ), 4 ), "月" ) )
　&mStringNextMonthJPN = #sstr( #trim( #変数( "mStringNextMonthJPN" ), 4 ), 1, #文字位置( #trim( #変数("mStringNextMonthJPN" ), 4 ), "月" ) )
　条件　( &traceON )　トレース出力　" "
　条件　( &traceON )　トレース出力　" &mStringThisMonthJPN = " + &mStringThisMonthJPN
　条件　( &traceON )　トレース出力　" &mStringLastMonthJPN = " + &mStringLastMonthJPN
　条件　( &traceON )　トレース出力　" &mStringNextMonthJPN = " + &mStringNextMonthJPN

　手続き実行　prcMonthReiwaConvert( &mStringThisMonthJPN, &mStringLastMonthJPN, &mStringNextMonthJPN )

　&mThisMonthDate = #日時値( &mStringThisMonth )
　&mLastMonthDate = #日時値( &mStringLastMonth )
　&mNextMonthDate = #日時値( &mStringNextMonth )

　** 未使用：&mWeekNumber = ( #週( &mBeginningOfMonthDate, 2, 1 ) - 1 )  /* &mWeekNumber は 月初の場合ゼロ：０ */
　&mDayOfWeekString = #曜日( &mBeginningOfMonthDate )
　&mDayOfWeekNumber = ( #対応番号( "日,月,火,水,木,金,土", &mDayOfWeekString ) - 1 )  /* ゼロ：０～６の値 */

　&mDayNumber       = ( 36 + &mDayOfWeekNumber )  /* 未使用：&mWeekNumber は 月初の場合ゼロ：０　( 36 + &mWeekNumber * 7 + &mDayOfWeekNumber ) */

　&dayStringBegin = #日数加算( &mBeginningOfMonthString, &mDayNumber * -1  )
　&loop = 105　                        /* 35マス × 3段 */
　繰り返し　&i = 1, &loop, &step

　　&dayString        = #日数加算( &dayStringBegin, &i )
　　&mDayString[ &i ] = #日付( &dayString, 1 )
　　&caption          = #str( #日( &dayString ) )
　　&objectName       = "lblDay_" + #str( &i )

　　オブジェクト操作　&objectName｛ 境界線ﾓｰﾄﾞ = "囲み罫線", 左罫線の太さ = "なし", 左罫線の種類 = "実線", 左罫線の色 = "黒", 上罫線の太さ = "なし", 上罫線の種類 = "実線", 上罫線の色 = "黒" }
　　オブジェクト操作　&objectName｛ 右罫線の太さ = "なし", 右罫線の種類 = "実線", 右罫線の色 = "黒", 下罫線の太さ = "なし", 下罫線の種類 = "実線", 下罫線の色 = "黒" }
　　オブジェクト操作　&objectName｛ ﾋﾝﾄﾃｷｽﾄ = "" }

　　if ( #月( &dayString ) = &month )

　　　オブジェクト操作 &objectName｛ 前景ﾓｰﾄﾞ = "指定色", 前景色 = "黒", ﾌｫﾝﾄ太さ = "太字", 背景ﾓｰﾄﾞ = "継承" ｝
　　else

　　　&compareMonth = #str( #年( &dayString ) ) + "年" + #str( #月( &dayString ) ) + "月"

　　　オブジェクト操作 &objectName｛ 前景ﾓｰﾄﾞ = "指定色", 前景色 = "チャコールグレイ", ﾌｫﾝﾄ太さ = "太字", 背景ﾓｰﾄﾞ = "継承" ｝
　　　ケース開始
　　　　ケース　( &stringLastLastMonth = &compareMonth )
　　　　　オブジェクト操作 &objectName｛ 前景ﾓｰﾄﾞ = "指定色", 前景色 = "ねずみ色", ﾌｫﾝﾄ太さ = "太字", 背景ﾓｰﾄﾞ = "継承" ｝ /* ﾌｫﾝﾄ太さ = "標準" */
　　　　ケース　( &stringNextNextMonth = &compareMonth )
　　　　　オブジェクト操作 &objectName｛ 前景ﾓｰﾄﾞ = "指定色", 前景色 = "ねずみ色", ﾌｫﾝﾄ太さ = "太字", 背景ﾓｰﾄﾞ = "継承" ｝
　　　　　**ケース　( &mStringLastMonth = &compareMonth )
　　　　　**ケース　( &mStringNextMonth = &compareMonth )
　　　ケース終了

　　end

　　if ( #mod( &i, 7 ) = 1 )
　　　オブジェクト操作 &objectName｛ 前景色 = "赤" ｝
　　end
　　if ( #mod( &i, 7 ) = 0 )
　　　オブジェクト操作 &objectName｛ 前景色 = "深緑" ｝
　　end

　　オブジェクト操作　&objectName｛ 標題 = &caption ｝
　　if ( #日付( &dayString, 1 ) = &todayString )

　　　&mDayObjectToday     = &objectName
　　　&mDayObjectSelectNow = &objectName
　　　&mDayObjectExit      = &objectName
　　　オブジェクト操作　&objectName｛ 背景ﾓｰﾄﾞ = "指定色", 背景色 = "青磁色" ｝/*, 境界線ﾓｰﾄﾞ = "角丸め" */
　　　*オブジェクト操作  &objectName.境界線ﾓｰﾄﾞ = "囲み罫線"
　　　オブジェクト操作  &objectName｛ 境界線ﾓｰﾄﾞ = "角丸め" ｝
　　　**オブジェクト操作  &objectName｛ 左罫線の太さ = "細線", 左罫線の種類 = "実線", 左罫線の色 = "白" }
　　　オブジェクト操作  &objectName｛ 上罫線の太さ = "細線", 上罫線の種類 = "実線", 上罫線の色 = "青" }
　　　**オブジェクト操作  &objectName｛ 右罫線の太さ = "細線", 右罫線の種類 = "実線", 右罫線の色 = "チャコールグレイ" }
　　　**オブジェクト操作  &objectName｛ 下罫線の太さ = "細線", 下罫線の種類 = "実線", 下罫線の色 = "チャコールグレイ" }
　　end

　繰り返し終了

　**変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　メソッド呼び出し　&formObjectName.変数変更()

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcDateReiwaConvert( 参照 文字列 &string )
　変数宣言　自動，文字列｛ &icon, &title = "prcDateReiwaConvert( )", &msg ｝
　変数宣言　自動，文字列｛ &compareString ｝
　変数宣言　自動，文字列｛ &yearHeisei, &yearReiwa ｝
　変数宣言　自動，文字列｛ &SP = #jis( #hex("20") ) ｝
　変数宣言　自動，文字列｛ &testDateStrig ｝
　変数宣言　自動，整数　｛ &paddingTypeNum ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &string     = " + &string

　if ( .not &mIsReiwaSupported )

　　条件　( &traceON )　トレース出力　" if ( #sstr( &string, 1, 1 ) = ""H"" .or #sstr( &string, 1, 2 ) = ""平成"" ) … " + #str( ( #sstr( &string, 1, 1 ) = "H" .or #sstr( &string, 1, 2 ) = "平成" ) )
　　if ( #sstr( &string, 1, 1 ) = "H" .or #sstr( &string, 1, 2 ) = "平成" )

　　　&compareString = #日時文字列( #日時値( &string ), 3, 1, 2 )  /* 3:平成14年 7月25日 ( 13時23分45秒 ) 1: 日まで 2: ゼロ詰め */
　　　条件　( &traceON )　トレース出力　" &string               = " + &string
　　　条件　( &traceON )　トレース出力　" &mReiwaFirstDateString = " + &mReiwaFirstDateString
　　　条件　( &traceON )　トレース出力　" &compareString        = " + &compareString
　　　if ( &compareString >= &mReiwaFirstDateString )

　　　　** &mPaddingTypeNum｛ 0 環境設定と同じ, 1 空白詰め, 2 ゼロ詰め, 3 詰めなし｝
　　　　&paddingTypeNum = &mPaddingTypeNum
　　　　条件　( &traceON )　トレース出力　" if ( &mPaddingTypeNum = 0 ) … " + #str( ( &mPaddingTypeNum = 0 ) )
　　　　if ( &mPaddingTypeNum = 0 )  /* 0 環境設定と同じ */
　　　　　&testDateStrig = #日時文字列( #日時値( "1999/05/01" ), 0, 1, 0 )  /* 0 環境設定と同じ形式 ( 13時23分45秒 ) 1: 日まで 0 環境設定と同じ */
　　　　　条件　( &traceON )　トレース出力　" &testDateStrig  = " + &testDateStrig

　　　　　&paddingTypeNum = 3
　　　　　条件　( #文字位置( &testDateStrig, &SP + "1" ) <> 0 )　&paddingTypeNum = 1
　　　　　条件　( #文字位置( &testDateStrig, "01"      ) <> 0 )　&paddingTypeNum = 2

　　　　end

　　　　if ( #文字位置( &string, "H" ) = 1 )
　　　　　&yearHeisei = "H" + #str( #年( &string ) )
　　　　　条件　( &paddingTypeNum = 1 )　&yearReiwa = "R" + #右側文字列( &SP + #str( #年( &string ) - 30 ), 2 )
　　　　　条件　( &paddingTypeNum = 2 )　&yearReiwa = "R" + #str( #年( &string ) - 30, 2 )
　　　　　条件　( &paddingTypeNum = 3 )　&yearReiwa = "R" + #str( #年( &string ) - 30 )
　　　　else
　　　　　&yearHeisei = "平成" + #str( #年( &string ) )
　　　　　条件　( &paddingTypeNum = 1 )　&yearReiwa = "令和" + #右側文字列( &SP + #str( #年( &string ) - 30 ), 2 )
　　　　　条件　( &paddingTypeNum = 2 )　&yearReiwa = "令和" + #str( #年( &string ) - 30, 2 )
　　　　　条件　( &paddingTypeNum = 3 )　&yearReiwa = "令和" + #str( #年( &string ) - 30 )
　　　　end
　　　　条件　( &traceON )　トレース出力　" &yearHeisei  = " + &yearHeisei
　　　　条件　( &traceON )　トレース出力　" &yearReiwa   = " + &yearReiwa

　　　　&string = #文字置換( &string, &yearHeisei, &yearReiwa )
　　　end

　　end

　end

　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &string     = " + &string     + "　※戻り値"
　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcDimensionsSet( 整数 &dimensions )
　変数宣言　自動，文字列｛ &icon, &title = "prcDimensionsSet( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：整数 &dimensions = " + #str( &dimensions )

　&msg = "&dimensions = " + #str( &dimensions )
　&icon = "i"
　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　ケース開始
　　ケース　( &dimensions = 1 )
　　　&mDayObjectTop    = "lblDay_36"
　　　&mDayObjectBottom = "lblDay_77"
　　　手続き実行　prcヘッダセット( 0 )
　　　手続き実行　prcフッタセット( 0 )
　　ケース　( &dimensions = 2 )
　　　&mDayObjectTop    = "lblDay_36"
　　　&mDayObjectBottom = "lblDay_105"
　　　手続き実行　prcヘッダセット( 0 )
　　　手続き実行　prcフッタセット( 1 )
　　ケース　( &dimensions = 3 )
　　　&mDayObjectTop    = "lblDay_1"
　　　&mDayObjectBottom = "lblDay_105"
　　　手続き実行　prcヘッダセット( 1 )
　　　手続き実行　prcフッタセット( 1 )
　ケース終了

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcKeySetDefault( )
　変数宣言　自動，文字列｛ &icon, &title = "prcKeySetDefault( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "GAME" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　手続き実行　VKprcEventKeyDownON( )　　　　/* [ｷｰﾀﾞｳﾝ]ｲﾍﾞﾝﾄを有効にする */
　手続き実行　VKprcKeyON( )　　　　　　　　 /* ｷｰに割当てたｺﾏﾝﾄﾞの実行を許可する */

　手続き実行　VKprcKeySet( "Ctrl + ↑",    1, "0", "手続き実行　prcOnKeyArrow( &VKmKeyString, &VKmRepeat )" )
　手続き実行　VKprcKeySet( "Ctrl + ↓",    1, "0", "手続き実行　prcOnKeyArrow( &VKmKeyString, &VKmRepeat )" )
　手続き実行　VKprcKeySet( "Ctrl + ←",    1, "0", "手続き実行　prcOnKeyArrow( &VKmKeyString, &VKmRepeat )" )
　手続き実行　VKprcKeySet( "Ctrl + →",    1, "0", "手続き実行　prcOnKeyArrow( &VKmKeyString, &VKmRepeat )" )


　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcMonthReiwaConvert( 参照 文字列 &stringThisMonthJPN, 参照 文字列 &stringLastMonthJPN, 参照 文字列 &stringNextMonthJPN )
　変数宣言　自動，文字列｛ &icon, &title = "prcMonthReiwaConvert( )", &msg ｝
　変数宣言　自動，文字列｛ &string, &reiwa ｝
　変数宣言　自動，文字列｛ &setString ｝
　変数宣言　自動，文字列｛ &variableName, &variableNameList ｝
　変数宣言　自動，整数　｛ &i, &loop, &step = 1 ｝
　変数宣言　自動，整数　｛ &year, &month ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &stringThisMonthJPN = " + &stringThisMonthJPN
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &stringLastMonthJPN = " + &stringLastMonthJPN
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &stringNextMonthJPN = " + &stringNextMonthJPN

　if ( .not &mIsReiwaSupported )

　　&variableNameList = #trim( "stringThisMonthJPN,stringLastMonthJPN,stringNextMonthJPN", 4 )

　　&loop = 3
　　繰り返し　&i = 1, &loop, &step
　　　条件　( &traceON )　トレース出力　" &i = " + #str( &i )

　　　&variableName = #対応文字列( &variableNameList, &i )
　　　&string       = #変数( &variableName )
　　　条件　( &traceON )　トレース出力　" &variableName = " + &variableName
　　　条件　( &traceON )　トレース出力　" &string       = " + &string

　　　条件　( &traceON )　トレース出力　" if ( #sstr( &string, 1, 2 ) = ""平成"" ) … " + #str( ( #sstr( &string, 1, 2 ) = "平成" ) )
　　　if ( #sstr( &string, 1, 2 ) = "平成" )

　　　　条件　( &traceON )　トレース出力　" if ( #元号年( &string ) >= 31 .and #月( &string ) >= 5 .or #元号年( &string ) > 31 ) … " + #str( ( #元号年( &string ) >= 31 .and #月( &string ) >= 5 .or #元号年( &string ) > 31 ) )
　　　　if ( #元号年( &string ) = 31 .and #月( &string ) >= 5 .or #元号年( &string ) > 31 )

　　　　　**条件　( &traceON )　トレース出力　" #文字置換( &string, "平成", "令和" ) = " + #文字置換( &string, "平成", "令和" )
　　　　　**&reiwa = #文字置換( &string, "平成", "令和" )
　　　　　**条件　( &traceON )　トレース出力　" &reiwa = " + &reiwa

　　　　　&month = #月(     &string )
　　　　　&year  = #元号年( &string ) - 30

　　　　　ケース開始
　　　　　　ケース　( &i = 1 )
　　　　　　　**&stringThisMonthJPN = #文字置換( &stringThisMonthJPN, "平成", "令和" )
　　　　　　　&stringThisMonthJPN = "令和" + #str( &year ) + "年" + #str( &month ) + "月"
　　　　　　ケース　( &i = 2 )
　　　　　　　**&stringLastMonthJPN = #文字置換( &stringLastMonthJPN, "平成", "令和" )
　　　　　　　&stringLastMonthJPN = "令和" + #str( &year ) + "年" + #str( &month ) + "月"
　　　　　　ケース　( &i = 3 )
　　　　　　　**&stringNextMonthJPN = #文字置換( &stringNextMonthJPN, "平成", "令和" )
　　　　　　　&stringNextMonthJPN = "令和" + #str( &year ) + "年" + #str( &month ) + "月"
　　　　　ケース終了
　　　　　** ＮＧ注意：2019.04.01 ﾌｫｰﾑ開始( ) → prcCalendarDraw( ) → prcMonthReiwaConvert( )
　　　　　** 桐9-2012 で以下の #set 関数 でエラーになる
　　　　　** KU1155:配列型変数には添字を指定してください
　　　　　** どうやっても回避できないので、ケース文に変更した
　　　　　** &setString = #set( &variableName, &reiwa )
　　　　　** &setString = #set( "STR", "い" )
　　　　　** &string = #set( &variableName, #文字置換( &string, "平成", "令和" ) )

　　　　end
　　　end

　　繰り返し終了
　end

　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &stringThisMonthJPN = " + &stringThisMonthJPN     + "　※戻り値"
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &stringLastMonthJPN = " + &stringLastMonthJPN     + "　※戻り値"
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &stringNextMonthJPN = " + &stringNextMonthJPN     + "　※戻り値"
　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcOnKeyArrow( 文字列 &keyString, 整数 &repeat )
　変数宣言　自動，文字列｛ &icon, &title = "prcOnKeyArrow( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName ｝
　変数宣言　自動，整数　｛ &currentNum, &currentNumBak, &beginNum, &endNum ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "GAME" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&currentNum    = #num( &mDayObjectSelectNow )
　&currentNumBak = &currentNum
　&beginNum      = #num( &mDayObjectTop )
　&endNum        = #num( &mDayObjectBottom )

　if ( &currentNum => &beginNum .and &currentNum <= &endNum )

　　ケース開始
　　　ケース　( &keyString = "Ctrl + ↑" )
　　　　条件　( &traceON )　トレース出力　" ケース　( &keyString = ""Ctrl + ↑"" )"

　　　　if ( &currentNum <> &beginNum )

　　　　　&currentNum = &currentNum - 7
　　　　　if ( &currentNum < &beginNum )

　　　　　　&currentNum = 6 + &currentNum
　　　　　　**&currentNum = &beginNum
　　　　　end
　　　　end

　　　ケース　( &keyString = "Ctrl + ↓" )
　　　　条件　( &traceON )　トレース出力　" ケース　( &keyString = ""Ctrl + ↓"" )"

　　　　if ( &currentNum <> &endNum )

　　　　　&currentNum = &currentNum + 7
　　　　　if ( &currentNum > &endNum )

　　　　　　&currentNum = -6 + &currentNum
　　　　　　**&currentNum = &endNum
　　　　　end
　　　　end

　　　ケース　( &keyString = "Ctrl + ←" )
　　　　条件　( &traceON )　トレース出力　" ケース　( &keyString = ""Ctrl + ←"" )"

　　　　&currentNum = &currentNum - 1
　　　　if ( &currentNum < &beginNum )
　　　　　&currentNum = &beginNum
　　　　end

　　　ケース　( &keyString = "Ctrl + →" )
　　　　条件　( &traceON )　トレース出力　" ケース　( &keyString = ""Ctrl + →"" )"

　　　　&currentNum = &currentNum + 1
　　　　if ( &currentNum > &endNum )
　　　　　&currentNum = &endNum
　　　　end

　　　ケース　その他
　　　　条件　( &traceON )　トレース出力　" ケース　その他"

　　ケース終了

　　&objectName = "lblDay_" + #str( &currentNum )
　　**&mAliasThis = &objectName

　　&msg =            "&keyString           = " + &keyString
　　&msg = &msg + "\n\n&repeat              = " + #str( &repeat )
　　&msg = &msg + "\n\n&mDayObjectTop       = " + &mDayObjectTop
　　&msg = &msg + "\n\n&mDayObjectBottom    = " + &mDayObjectBottom
　　&msg = &msg + "\n\n&mDayObjectSelectNow = " + &mDayObjectSelectNow
　　&msg = &msg + "\n\n&mAliasThis          = " + &mAliasThis
　　&icon = "i"
　　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　　条件　( &traceON )　トレース出力　" if ( &currentNum <> &currentNumBak ) … " + #str( ( &currentNum <> &currentNumBak ) )
　　if ( &currentNum <> &currentNumBak )

　　　&mAliasThis = &objectName
　　　手続き実行　famDay::ﾏｳｽ左ｸﾘｯｸ( &mマウス位置, 1, 1, &m処理中止 )
　　end

　end

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcPublicHolidayVisible( )  /* 整数 &visible */
　変数宣言　自動，文字列｛ &icon, &title = "prcPublicHolidayVisible( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName, &string, &monthString, &variableName ｝
　変数宣言　自動，文字列｛ &dayStringList, &publicHolidayList, &hintTxt, &曜日 ｝
　変数宣言　自動，整数　｛ &i, &flag振り替え ｝
　変数宣言　自動，整数　｛ &at ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&icon = "i"
　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　&i = 1
　&monthString = #str( #月( &mDayString[ &i ] ), 2 )
　繰り返し　( &i <= 105 )   /* 35マス × 3段 */

　　&publicHolidayList = #u
　　&monthString       = #str( #月( &mDayString[ &i ] ), 2 )
　　繰り返し　( &monthString = #str( #月( &mDayString[ &i ] ), 2 )  )

　　　&variableName = "m祝日" + &monthString + "月"　/* &m祝日01月 */
　　　if ( #配列要素数( &variableName ) > 0 )

　　　　if ( &publicHolidayList = #u )

　　　　　手続き実行　prc祝日リスト取得( &mDayString[ &i ], &variableName, &dayStringList, &publicHolidayList )
　　　　　条件　( &traceON )　トレース出力
　　　　　条件　( &traceON )　トレース出力　" &dayStringList     = " + &dayStringList
　　　　　条件　( &traceON )　トレース出力　" &publicHolidayList = " + &publicHolidayList
　　　　end
　　　end
　　　&string = &mDayString[ &i ]
　　　**条件　( &traceON )　トレース出力　" " + #str( &i ) + " &string = " + &string + " " + #str( #月( &string ), 2 )  + " " + #str( #配列要素数( &variableName ) ) + " " + &publicHolidayList
　　　&at = #対応番号( &dayStringList, &string )
　　　if ( &at  <> 0 )

　　　　&hintTxt    = #対応文字列( &publicHolidayList, &at )
　　　　&objectName = "lblDay_" + #str( &i )
　　　　オブジェクト操作 &objectName｛ 前景色 = "赤",  ﾋﾝﾄﾃｷｽﾄ = &hintTxt ｝

　　　　条件　( &traceON )　トレース出力　" " + #str( &i ) + " &string = " + &string + " " + #str( #月( &string ), 2 )  + " " + #str( #配列要素数( &variableName ) ) + " " + &publicHolidayList
　　　end

　　　&i = &i + 1
　　　if ( &i > 105 )   /* 配列要素数をオーバーしないこと */
　　　　条件　( &traceON )　トレース出力　" 配列要素数をオーバーするので繰り返し中止"
　　　　繰り返し中止
　　　end
　　繰り返し終了
　　**条件　( &traceON )　トレース出力　" 繰り返し終了"


　　**&objectName       = "lblDay_" + #str( &i )
　　**オブジェクト操作　&objectName｛ ﾋﾝﾄﾃｷｽﾄ = "" }

　繰り返し終了

　if ( #年( &mStringThisMonth ) >= 1973 )  /* 初適用は1973年（昭和48年）4月30日 */
　　条件　( &traceON )　トレース出力　" 振り替え休日の探索を実行開始しました"
　　&flag振り替え = 0
　　&i            = 1
　　繰り返し　( &i <= 105 )   /* 35マス × 3段 */

　　　&string     = &mDayString[ &i ]
　　　&曜日       = #曜日( &string )
　　　&objectName = "lblDay_" + #str( &i )
　　　オブジェクト操作　&objectName｛ &hintTxt = ﾋﾝﾄﾃｷｽﾄ ｝
　　　if ( &hintTxt <> #u )

　　　　if ( &曜日 = "日" )
　　　　　&flag振り替え = 1
　　　　end

　　　　条件　( &traceON )　トレース出力　" ", _&objectName, " ",  _&string, " ", _&hintTxt, " ", &曜日, " ", _&flag振り替え
　　　else

　　　　if ( &flag振り替え )

　　　　　&objectName = "lblDay_" + #str( &i )
　　　　　オブジェクト操作 &objectName｛ 前景色 = "赤",  ﾋﾝﾄﾃｷｽﾄ = "振り替え休日" ｝

　　　　　&flag振り替え = 0
　　　　　条件　( &traceON )　トレース出力　" ", _&objectName, " ",  _&string, " ", _&hintTxt, " ", &曜日, " ", _&flag振り替え
　　　　end

　　　end

　　　**条件　( &traceON )　トレース出力　" ", _&objectName, " ",  _&string, " ", _&hintTxt, " ", &曜日, " ", _&flag振り替え

　　　&i = &i + 1
　　繰り返し終了
　　条件　( &traceON )　トレース出力　" 振り替え休日の探索を実行終了しました"
　end

　変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　メソッド呼び出し　&formObjectName.変数変更()


　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcReiwaSupportTest( 文字列 &reiwaFirstDate, 参照 整数 &isReiwaSupported )
　変数宣言　自動，文字列｛ &icon, &title = "prcReiwaSupportTest( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&isReiwaSupported = 0

　**&reiwaFirstDate = #日時文字列( #日時値( "2019/05/01" ), 3, 1, 2 )  /* 3:平成14年 7月25日 ( 13時23分45秒 ) 1: 日まで 2: ゼロ詰め */
　**条件　( &traceON )　トレース出力　_#日時値( "2019/04/01" )
　**条件　( &traceON )　トレース出力　_&mDateTypeNum
　**条件　( &traceON )　トレース出力　_&mDateTimeScopeNum
　**条件　( &traceON )　トレース出力　_&mPaddingTypeNum
　条件　( &traceON )　トレース出力　_&reiwaFirstDate
　if ( #sstr( &reiwaFirstDate, 1, 2 ) = "令和" )
　　&isReiwaSupported = 1
　end

　条件　( &traceON )　トレース出力　" 引数：整数 参照 &isReiwaSupported  = " + #str( &isReiwaSupported )    + "　※戻り値"
　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcTitlebarDraw( 文字列 &string, 参照 整数 &is元号 )
　変数宣言　自動，文字列｛ &icon, &title = "prcTitlebarDraw( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"
　条件　( &traceON )　トレース出力　" 引数：文字列 &string     = " + &string
　条件　( &traceON )　トレース出力　" 引数：整数 参照 &is元号  = " + #str( &is元号 )

　&is元号 = 0
　&is元号 = ( #文字位置( &string, "平成" ) <> 0 .or  #文字位置( &string, "H" ) <> 0 .or #文字位置( &string, "令和" ) <> 0 .or #文字位置( &string, "R" ) <> 0 )

　手続き実行　prcDateReiwaConvert( &string )
　&string = #ファイル名( &INFmMyWfmName, 2 ) + " " + &string

　変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )

　オブジェクト操作　&formObjectName｛ ﾌｫｰﾑ表題 = &string ｝
　**メソッド呼び出し　&formObjectName.変数変更()

　条件　( &traceON )　トレース出力　" 引数：整数 参照 &is元号  = " + #str( &is元号 )    + "　※戻り値"
　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcフッタセット( 整数 &visible )
　変数宣言　自動，文字列｛ &icon, &title = "prcフッタセット( )", &msg ｝
　変数宣言　自動，文字列｛ &objectName ｝
　変数宣言　自動，整数　｛ &i, &loop, &step = 1 ｝ /* &visible */
　変数宣言　自動，数値　｛ &height, &twips = 20, &posY ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：整数 &visible = " + #str( &visible )

　&loop = 105　                        /* 35マス × 3段 */
　繰り返し　&i = 78, &loop, &step
　　&objectName       = "lblDay_" + #str( &i )
　　オブジェクト操作 &objectName｛ 画面表示 = &visible ｝
　繰り返し終了
　&objectName       = "txtNextMonth"
　オブジェクト操作 &objectName｛ 画面表示 = &visible ｝

　if ( &visible )
　　&posY   = 90 * &twips   /* 110 →  90 */
　　&height = 120 * &twips   /* 140 → 120 */
　　&objectName       = "txtThisMonth"
　　オブジェクト操作  &objectName｛ 境界線ﾓｰﾄﾞ = "囲み罫線", 左罫線の太さ = "なし", 上罫線の太さ = "なし", 右罫線の太さ = "なし", 下罫線の太さ = "なし" }
　　オブジェクト操作  &objectName｛ 下罫線の太さ = "細線", 下罫線の種類 = "実線", 下罫線の色 = "チャコールグレイ" }
　else
　　&posY   = 10 * &twips
　　&height = 40 * &twips
　　&objectName       = "txtThisMonth"
　　オブジェクト操作  &objectName｛ 境界線ﾓｰﾄﾞ = "囲み罫線", 左罫線の太さ = "なし", 上罫線の太さ = "なし", 右罫線の太さ = "なし", 下罫線の太さ = "なし" }
　end

　&objectName       = "HDLVARcmdOK"
　オブジェクト操作　&objectName｛ 始点Y = &posY  ｝
　&objectName       = "HDLVARcmdｷｬﾝｾﾙ"
　オブジェクト操作　&objectName｛ 始点Y = &posY  ｝

　**メソッド呼び出し　&objectName.再描画( 0 )
　**メソッド呼び出し　@ﾌｫｰﾑ.描画更新()

　オブジェクト操作　@ﾌｫｰﾑﾌｯﾀ部｛ ｾｸｼｮﾝの高さ = &height ｝

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prcヘッダセット( 整数 &visible )
　変数宣言　自動，文字列｛ &icon, &title = "prcヘッダセット( )", &msg ｝
　変数宣言　自動，数値　｛ &height, &twips = 20 ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　条件　( &traceON )　トレース出力　" 引数：整数 &visible = " + #str( &visible )

　if ( &visible )
　　&height = 150 * &twips
　else
　　&height = 50 * &twips
　end
　オブジェクト操作　@ﾌｫｰﾑﾍｯﾀﾞ部｛ ｾｸｼｮﾝの高さ = &height ｝

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　xOLDprc祝日データの初期化( )
　変数宣言　自動，文字列｛ &icon, &title = "prc祝日データの初期化( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　*                       月,日,回,曜日,祝日等名,    適用開始年,適用終了年
　&m祝日01月[1] = #trim( " 1, 1,,,      元日        ,1948,"    , 4 )
　&m祝日01月[2] = #trim( " 1,15,,,      成人の日    ,1948,1999", 4 )
　&m祝日01月[3] = #trim( " 1, 0, 2,月,  成人の日    ,2000,"    , 4 )
　&m祝日02月[1] = #trim( " 2,11,,,      建国記念の日,1967,"    , 4 )
　&m祝日02月[2] = #trim( " 2,23,,,      天皇誕生日  ,2020"     , 4 )  /* 2019年、2月23日に期日変更される予定。ただし適用は2020年からで、2019年は日程上設定されない */
　&m祝日02月[3] = #trim( " 2,24,,,      大喪の礼    ,1989,1989", 4 )  /* 皇室慶弔行事 1989年（平成元年）2月24日 昭和天皇の大喪の礼 */
　&m祝日03月[1] = #trim( " 3, 0, 0,,    春分の日    ,1948,"    , 4 )
　&m祝日04月[1] = #trim( " 4,29,,,      天皇誕生日  ,1948,1988", 4 )
　&m祝日04月[2] = #trim( " 4,29,,,      みどりの日  ,1989,2006", 4 )
　&m祝日04月[3] = #trim( " 4,29,,,      昭和の日    ,2007,"    , 4 )
　&m祝日04月[4] = #trim( " 4,10,,,    　親王結婚の儀,1959,1959", 4 )  /* 皇室慶弔行事 1959年（昭和34年）4月10日 皇太子・明仁親王の結婚の儀 */
　&m祝日04月[5] = #trim( " 4,30,,,    　国民の休日  ,2019,2019", 4 )
　&m祝日05月[1] = #trim( " 5, 3,,,      憲法記念日  ,1948,"    , 4 )
　&m祝日05月[2] = #trim( " 5, 4,,,      国民の休日  ,1988,2006", 4 )  /* 5月4日は1988年（昭和63年）～ 2006年（平成18年）の間は、一部（日曜日or月曜日）を除き「国民の休日」*/
　&m祝日05月[3] = #trim( " 5, 4,,,      みどりの日  ,2007,"    , 4 )
　&m祝日05月[4] = #trim( " 5, 5,,,      こどもの日  ,1948,"    , 4 )
　&m祝日05月[5] = #trim( " 5, 1,,,      天皇の即位  ,2019,2019", 4 )  /* 天皇の即位の日及び即位礼正殿の儀の行われる日を休日とする法律 */
　&m祝日05月[6] = #trim( " 5, 2,,,      国民の休日  ,2019,2019", 4 )
　&m祝日06月[1] = #trim( " 6, 9,,,      親王結婚の儀,1993,1993", 4 )  /* 皇室慶弔行事 1993年（平成5年）6月9日   皇太子・皇太子徳仁親王の結婚の儀 */
　&m祝日07月[1] = #trim( " 7,20,,,      海の日      ,1996,2002", 4 )
　&m祝日07月[2] = #trim( " 7, 0, 3,月,  海の日      ,2003,2019", 4 )
　&m祝日07月[3] = #trim( " 7,23,,,      海の日      ,2020,2020", 4 )
　&m祝日07月[4] = #trim( " 7, 0, 3,月,  海の日      ,2021,"    , 4 )
　&m祝日07月[5] = #trim( " 7,24,,,      スポーツの日,2020,2020", 4 )
　&m祝日08月[1] = #trim( " 8,11,,,      山の日      ,2016,2019", 4 )
　&m祝日08月[2] = #trim( " 8,10,,,      山の日      ,2020,2020", 4 )
　&m祝日08月[3] = #trim( " 8,11,,,      山の日      ,2021,"    , 4 )
　&m祝日09月[1] = #trim( " 9,15,,,      敬老の日    ,1966,2002", 4 )
　&m祝日09月[2] = #trim( " 9, 0, 3,月,  敬老の日    ,2003,"    , 4 )
　&m祝日09月[3] = #trim( " 9, 0, 0,,    秋分の日    ,1948,"    , 4 )
　&m祝日09月[4] = #trim( " 9, 0, 0,,    国民の休日  ,2009,"    , 4 )  /* 敬老の日 と 秋分の日 の間で、月曜日（振り替え休日）を除く　最初の適用は2009年（平成21年）9月22日 */
　&m祝日10月[1] = #trim( "10,10,,,      体育の日    ,1966,1999", 4 )
　&m祝日10月[2] = #trim( "10, 0, 2,月,  体育の日    ,2000,2019", 4 )
　&m祝日10月[3] = #trim( "10, 0, 2,月,  スポーツの日,2021,"    , 4 )
　&m祝日10月[4] = #trim( "10,22,,,  即位の礼正殿の儀,2019,2019", 4 )  /* 天皇の即位の日及び即位礼正殿の儀の行われる日を休日とする法律 */
　&m祝日11月[1] = #trim( "11, 3,,,      文化の日    ,1948,"    , 4 )
　&m祝日11月[2] = #trim( "11,12,,,    即位礼正殿の儀,1990,1990", 4 )  /* 皇室慶弔行事 1990年（平成2年）11月12日 即位の礼正殿の儀 */
　&m祝日11月[3] = #trim( "11,23,,,      勤労感謝の日,1948,"    , 4 )
　&m祝日12月[1] = #trim( "12,23,,,      天皇誕生日  ,1989,2018", 4 )
　**                     " 0, 0,,,     （振替休日） ,1973,"    , 4 )  振り替え休日はパラメータを設定できないので処理は、prcPublicHolidayVisible で行う

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prc祝日リスト取得( 文字列 &dayString, 文字列 &variableName, 参照 文字列 &dayStringList, 参照 文字列 &publicHolidayList )
　変数宣言　自動，文字列｛ &icon, &title = "prc祝日リスト取得( )", &msg ｝
　変数宣言　自動，文字列｛ &祝日名, &曜日, &yyyymmdd, &dayOfWeekString ｝
　変数宣言　自動，文字列｛ &敬老の日, &秋分の日, &国民の休日 ｝
　変数宣言　自動，文字列｛ &comma = #jis( #hex("2C") ), &bar = #jis( #hex("2D") ) ｝
　変数宣言　自動，整数　｛ &year, &month, &day, &序数, &適用開始年, &適用終了年, &日数 ｝
　変数宣言　自動，整数　｛ &i, &loop, &step = 1 ｝
　変数宣言　自動，整数　｛ &曜日cnt, &at ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&dayStringList     = #u
　&publicHolidayList = #u

　条件　( &traceON )　トレース出力　" 引数：文字列 &dayString              = " + &dayString
　条件　( &traceON )　トレース出力　" 引数：文字列 &variableName           = " + &variableName
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &dayStringList     = " + &dayStringList
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &publicHolidayList = " + &publicHolidayList

　** 引数：文字列 &dayString              = 2017-12-24
　** 引数：文字列 &variableName           = m祝日12月
　** 引数：文字列 参照 &dayStringList     =
　** 引数：文字列 参照 &publicHolidayList =
　** 1 #変数( &variableName, &i ) = 12,23,,,天皇誕生日,1989,2018
　**                         月,日,週,曜日,祝日等名,    適用開始年,適用終了年
　** &m祝日01月[1] = #trim( " 1, 1,  ,    ,元日        ,1948      ,          ", 4 )
　**                          1  2  3   4  5            6          7

　&year = #年( &dayString )
　&loop = #配列要素数( &variableName )
　繰り返し　&i = 1, &loop, &step

　　&month      = #num( #対応文字列( #変数( &variableName, &i ), 1 ) )
　　&day        = #num( #対応文字列( #変数( &variableName, &i ), 2 ) )
　　&序数       = #num( #対応文字列( #変数( &variableName, &i ), 3 ) )
　　&曜日       =       #対応文字列( #変数( &variableName, &i ), 4 )
　　&祝日名     =       #対応文字列( #変数( &variableName, &i ), 5 )
　　&適用開始年 = #num( #対応文字列( #変数( &variableName, &i ), 6 ) )
　　&適用終了年 = #num( #対応文字列( #変数( &variableName, &i ), 7 ) )
　　&適用終了年 = #未定義値変換( &適用終了年, &year )
　　**条件　( &traceON )　トレース出力　_&year, " ", _&month, " ", _&day, " ", _&序数, " ", _&曜日, " ", _&祝日名, " ", _&適用開始年, " ", _&適用終了年

　　if ( &適用開始年 <= &year .and &適用終了年 >= &year )

　　　条件　( &traceON )　トレース出力　"○ 適用 ", _&year, " ", _&month, " ", _&day, " ", _&序数, " ", _&曜日, " ", _&祝日名, " ", _&適用開始年, " ", _&適用終了年


　　　if ( &day )
　　　　** 固定日
　　　　&yyyymmdd = #str( &year ) + &bar + #str( &month, 2 ) + &bar + #str( &day, 2 )
　　　　条件　( &traceON )　トレース出力　" ヒット ", _&yyyymmdd
　　　　条件　( &traceON )　トレース出力　" ヒット ", _&祝日名

　　　　/* 5月4日は1988年（昭和63年）～ 2006年（平成18年）の間は、一部（日曜日or月曜日）を除き「国民の休日」*/
　　　　if ( &祝日名 = "国民の休日" )

　　　　　&曜日 = #曜日( &yyyymmdd )
　　　　　if ( &曜日 = "日" .or &曜日 = "月" )

　　　　　　&yyyymmdd = #u

　　　　　　条件　( &traceON )　トレース出力　" 除外  ", #str( &year ) + &bar + #str( &month, 2 ) + &bar + #str( &day, 2 ), " ", _&曜日
　　　　　　条件　( &traceON )　トレース出力　" 除外 ", _&祝日名, " ", _&曜日
　　　　　　条件　( &traceON )　トレース出力　" 5月4日は1988年（昭和63年）～ 2006年（平成18年）の間は、一部（日曜日or月曜日）を除き「国民の休日」"
　　　　　end
　　　　end

　　　else

　　　　if ( &序数 )
　　　　　** 週
　　　　　&曜日cnt = 0
　　　　　&yyyymmdd        = #str( &year ) + &bar + #str( &month, 2 ) + &bar + "01"
　　　　　繰り返し ( &month = #月( &yyyymmdd ) )

　　　　　　&dayOfWeekString = #曜日( &yyyymmdd )
　　　　　　if ( &dayOfWeekString = &曜日 )
　　　　　　　&曜日cnt = &曜日cnt + 1
　　　　　　end

　　　　　　if ( &dayOfWeekString = &曜日 .and &曜日cnt = &序数 )
　　　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&yyyymmdd, " ", _&曜日cnt, " ", _&dayOfWeekString
　　　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&祝日名, " ", _&序数, " ", _&曜日

　　　　　　　繰り返し中止
　　　　　　end

　　　　　　&yyyymmdd = #日数加算( &yyyymmdd, +1  )
　　　　　　&yyyymmdd = #日付( &yyyymmdd, 1 )
　　　　　繰り返し終了

　　　　end

　　　　if ( &祝日名 = "春分の日" )

　　　　　&yyyymmdd = #str( &year ) + &bar + #str( &month, 2 ) + &bar + #str( #切り捨て( 0.24242 * &year - #切り捨て( &year / 4, 0 ) + 35.84, 0 ) )
　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&yyyymmdd
　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&祝日名
　　　　end

　　　　if ( &祝日名 = "秋分の日" )

　　　　　&yyyymmdd = #str( &year ) + &bar + #str( &month, 2 ) + &bar + #str( #切り捨て( 0.24204 * &year - #切り捨て( &year / 4, 0 ) + 39.01, 0 ) )
　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&yyyymmdd
　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&祝日名
　　　　end

　　　　if ( &祝日名 = "国民の休日" ) /* 敬老の日 と 秋分の日 の間で、月曜日（振り替え休日）を除く　最初の適用は2009年（平成21年）9月22日 */

　　　　　&yyyymmdd = #u
　　　　　**: &dayStringList     = 2018-09-17,2018-09-23,2018-09-23
　　　　　**: &publicHolidayList = 敬老の日,秋分の日,国民の休日
　　　　　&at         = #対応番号(   &publicHolidayList, "敬老の日" )
　　　　　&敬老の日   = #対応文字列( &dayStringList, &at            )
　　　　　&at         = #対応番号(   &publicHolidayList, "秋分の日" )
　　　　　&秋分の日   = #対応文字列( &dayStringList, &at            )
　　　　　&国民の休日 = #日数加算( &敬老の日, +1 )

　　　　　&日数 = #日数( &敬老の日, &秋分の日 )
　　　　　条件　( &traceON )　トレース出力　" ", _&敬老の日, " ", _&国民の休日, " ", _&秋分の日, " ", _&日数
　　　　　if ( &日数 = 2 )

　　　　　　&曜日 = #曜日( &国民の休日 )
　　　　　　if ( &曜日 <> "月" )

　　　　　　　&yyyymmdd = #日付( &国民の休日, 1 )

　　　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&yyyymmdd
　　　　　　　条件　( &traceON )　トレース出力　" ヒット ", _&祝日名
　　　　　　　条件　( &traceON )　トレース出力　" 敬老の日 と 秋分の日 の間で、月曜日（振り替え休日）を除く"

　　　　　　else

　　　　　　　条件　( &traceON )　トレース出力　" 除外", _&国民の休日, " ", _&日数, " ", _&曜日
　　　　　　　条件　( &traceON )　トレース出力　" 除外 ", _&祝日名
　　　　　　end

　　　　　else

　　　　　　条件　( &traceON )　トレース出力　" 除外", _&国民の休日, " ", _&日数, " ", _&曜日
　　　　　　条件　( &traceON )　トレース出力　" 除外 ", _&祝日名
　　　　　end
　　　　end

　　　end

　　　if ( &yyyymmdd <> #u )
　　　　&dayStringList     = &dayStringList +     #cond( &dayStringList     <> #u, &comma ) + &yyyymmdd
　　　　&publicHolidayList = &publicHolidayList + #cond( &publicHolidayList <> #u, &comma ) + &祝日名
　　　end

　　else

　　　条件　( &traceON )　トレース出力　"× 除外 ", _&year, " ", _&month, " ", _&day, " ", _&序数, " ", _&曜日, " ", _&祝日名, " ", _&適用開始年, " ", _&適用終了年
　　end

　繰り返し終了

　&dayStringList     = #未定義値変換( &dayStringList,     "なし" )
　&publicHolidayList = #未定義値変換( &publicHolidayList, "なし" )

　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &dayStringList     = " + &dayStringList     + "　※戻り値"
　条件　( &traceON )　トレース出力　" 引数：文字列 参照 &publicHolidayList = " + &publicHolidayList + "　※戻り値"

　** 暦.KEV の プロシージャ：暦の祝日データ作成 より
　**　ケース ( [指定方法] = "春分指定" )
　**　　&作業日 = #切り捨て( 0.24242 * &作業年 - #切り捨て( &作業年 / 4 , 0 ) + 35.84 , 0 )
　**　ケース ( [指定方法] = "秋分指定" )
　**　　&作業日 = #切り捨て( 0.24204 * &作業年 - #切り捨て( &作業年 / 4 , 0 ) + 39.01 , 0 )

　** 条件　( &traceON )　トレース出力　" " + #str( &i ) + " #変数( &variableName, &i ) = " + #変数( &variableName, &i )
　** &m祝日03月[1] = #trim( " 3, 0, 0,,    春分の日    ,1948,"    , 4 )
　** &m祝日09月[3] = #trim( " 9, 0, 0,,    秋分の日    ,1948,"    , 4 )

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　prc日時文字列形式Draw( )
　変数宣言　自動，文字列｛ &icon, &title = "prc日時文字列形式Draw( )", &msg ｝
　変数宣言　自動，文字列｛ &string ｝
　変数宣言　自動，整数　｛ &itemMum ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　**&traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　&itemMum = &mDateTypeNum + 1

　変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　&mTodayDate   = #日時値
　&mTodayString = #日時文字列( &mTodayDate, &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum )
　&string       = #ファイル名( &INFmMyWfmName, 2 ) + " " + &mTodayString
　**オブジェクト操作　&formObjectName｛ ﾌｫｰﾑ表題 = &string ｝

　手続き実行　prcTitlebarDraw( &mTodayString, &mIs元号 )

　**変数宣言　自動，文字列｛ &formObjectName = "ﾌｫｰﾑ"  ｝
　条件　( #変数( "INFmKnjForm" ) )　&formObjectName = #全角( &formObjectName )
　メソッド呼び出し　&formObjectName.変数変更()

　&msg  = "&itemMum = " + #str( &itemMum )
　&msg  = &msg + "\n\n&m日時文字列関数パラメータDim = " + &m日時文字列関数パラメータDim[ &itemMum  ]
　&msg  = &msg + "\n\n&mDateTypeNum = " + #str( &mDateTypeNum )
　&icon = "i"
　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　** #日時文字列( 【 tmst | itvl 】 , n1 , n2 , n3 )
　** n1
　**【日時型】
　** 0 環境設定と同じ形式
　** 1 2002年 7月25日 ( 13時23分45秒 )
　** 2 2002年 7月25日 ( 午後 1時23分45秒 )
　** 3 平成14年 7月25日 ( 13時23分45秒 )        ※元号 &mDateTypeNum ： 3 ～ 8
　** 4 平成14年 7月25日 ( 午後 1時23分45秒 )
　** 5 H 14/ 7/25 ( 13:23:45 )
　** 6 H 14/ 7/25 ( 1:23:45 PM )
　** 7 H 14- 7-25 ( 13:23:45 )
　** 8 H 14- 7-25 ( 1:23:45 PM )
　** 9 2002/ 7/25 ( 13:23:45 )
　**10 2002/ 7/25 ( 1:23:45 PM )
　**11 2002- 7-25 ( 13:23:45 )
　**12 2002- 7-25 ( 1:23:45 PM )
　**13 02/ 7/25 ( 13:23:45 )
　**14 02/ 7/25 ( 1:23:45 PM )
　**15 02- 7-25 ( 13:23:45 )
　**16 02- 7-25 ( 1:23:45 PM )
　**17 Jul 25,2002 ( 13:23:45 )
　**18 7/25/2002 ( 13:23:45 )
　**19 25 Jul 2002 ( 13:23:45 )
　**20 25/ 7/2002 ( 13:23:45 )
　**21 2002. 7.25 ( 13:23:45 )

　** n2 表示範囲を指定します。
　** 0 環境設定と同じ
　** 1 日まで
　** 2 時まで
　** 3 分まで
　** 4 秒まで

　** n3 数値の表示を指定します。
　** 0 環境設定と同じ
　** 1 空白詰め
　** 2 ゼロ詰め
　** 3 詰めなし

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　cmdオプションClick( )
　変数宣言　自動，文字列｛ &icon, &title = "cmdオプションClick( )", &msg ｝
　変数宣言　自動，文字列｛ &wfmFileName, &tblFileName, &procedureName ｝
　変数宣言　自動，整数　｛ &hdl ｝
　変数宣言　自動，文字列｛ &yen = #jis( #hex("5C") ) ｝

　&wfmFileName = &mDatePickerOptionWfm
　if ( #ファイルサイズ( &wfmFileName ) > 0 )

　　&FSCmModalFormColor = &FSCmFormColor    /* モーダルのカラーを標準のカラーと同じにする */

　　** &wfmFileName へ渡す：データ型｛ 変数名リスト（コンマ区切り） ｝
　　**&HDLVARmStoreParameter = #u
　　&HDLVARmStoreParameter = "整数｛ &WIDGETmLive ｝整数｛ &mPaddingTypeNum ｝整数｛ &mClipboardCopy ｝文字列｛ &m変数名A, &m変数名B ｝文字列｛ &m日時文字列関数パラメータDim ｝整数｛ &mDateTypeNum ｝整数｛ &mModeHDLVAR ｝"

　　** &wfmFileName から受け取る：変数名リスト（コンマ区切り）
　　**&HDLVARmReturnParameter = #u
　　&HDLVARmReturnParameter = "&FSCmFormColor, &WIDGETmLive, &mPaddingTypeNum, &mClipboardCopy, &m変数名A, &m変数名B, &mDateTypeNum"

　　** 例：&mString = "請求書の日付"
　　&mString       = "移動先の年と月を指定します"
　　&wfmFileName   = &wfmFileName
　　&tblFileName   = #u
　　&procedureName = "cmdオプションClickRETURN"
　　**                             引数の意味：モーダル          フォーム       表           実行手続き名    ハンドル※戻り値はモーダル：#u モードレス：ハンドル番号
　　手続き実行　HDLVARprcWindowAppearVarSend( &INFmModalControl, &wfmFileName, &tblFileName, &procedureName, &hdl )

　else

　　&msg =            "ファイルが見つかりません"
　　&msg = &msg + "\n" + #複写( "-", 50 )
　　&msg = &msg + "\n\nフォルダ：" + #文字置換( #ファイル名( &wfmFileName, 5 ), &yen, &yen + &yen )
　　&msg = &msg + "\n\nファイル：" + #ファイル名( &wfmFileName, 3 )
　　&icon = "e"
　　手続き実行　INFprcMsgPause( &icon, &title, &msg )
　end

手続き定義終了

手続き定義開始　cmdオプションClickRETURN( 整数 &exit )
　変数宣言　自動，文字列｛ &icon, &title = "cmdオプションClickRETURN( )", &msg ｝
　変数宣言　自動，文字列｛ &wfmFileName, &yen = #jis( #hex("5C") ) ｝

　**手続き実行　INFprcMsgPause( &icon, &title, &msg )

　if　( &exit )　/* &exit が 1(ＯＫ) または 2(適用) */

　　手続き実行　FSCprcFormSectionCalorSet( &FSCmFormColor )
　　&FSCmFormColorParameter = &FSCmFormColor
　　&FSCmPaletteColorName   = &FSCmFormColor

　　&FSCmModalFormColor = &mModalFormColorBak     /* モーダルのカラーを復元する */

　　手続き実行　prc日時文字列形式Draw( )  /* famPaddingType::ｿｰｽ値更新() */

　else　/* &exit が 0(ｷｬﾝｾﾙ・×) */

　　＊[ｷｬﾝｾﾙ]または[×]の場合の処理

　end

手続き定義終了

手続き定義開始　prc祝日データの初期化( )
　変数宣言　自動，文字列｛ &icon, &title = "prc祝日データの初期化( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝
　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　*                       月,日,回,曜日,祝日等名,    適用開始年,適用終了年
　&m祝日01月[1] = #trim( " 1, 1,,,      元日        ,1948,"    , 4 )
　&m祝日01月[2] = #trim( " 1,15,,,      成人の日    ,1948,1999", 4 )
　&m祝日01月[3] = #trim( " 1, 0, 2,月,  成人の日    ,2000,"    , 4 )
　&m祝日02月[1] = #trim( " 2,11,,,      建国記念の日,1967,"    , 4 )
　&m祝日02月[2] = #trim( " 2,23,,,      天皇誕生日  ,2020"     , 4 )  /* 2019年、2月23日に期日変更される予定。ただし適用は2020年からで、2019年は日程上設定されない */
　&m祝日02月[3] = #trim( " 2,24,,,      大喪の礼    ,1989,1989", 4 )  /* 皇室慶弔行事 1989年（平成元年）2月24日 昭和天皇の大喪の礼 */
　&m祝日03月[1] = #trim( " 3, 0, 0,,    春分の日    ,1948,"    , 4 )
　&m祝日04月[1] = #trim( " 4,29,,,      天皇誕生日  ,1948,1988", 4 )
　&m祝日04月[2] = #trim( " 4,29,,,      みどりの日  ,1989,2006", 4 )
　&m祝日04月[3] = #trim( " 4,29,,,      昭和の日    ,2007,"    , 4 )
　&m祝日04月[4] = #trim( " 4,10,,,    　親王結婚の儀,1959,1959", 4 )  /* 皇室慶弔行事 1959年（昭和34年）4月10日 皇太子・明仁親王の結婚の儀 */
　&m祝日04月[5] = #trim( " 4,30,,,    　国民の休日  ,2019,2019", 4 )
　&m祝日05月[1] = #trim( " 5, 3,,,      憲法記念日  ,1948,"    , 4 )
　&m祝日05月[2] = #trim( " 5, 4,,,      国民の休日  ,1988,2006", 4 )  /* 5月4日は1988年（昭和63年）～ 2006年（平成18年）の間は、一部（日曜日or月曜日）を除き「国民の休日」*/
　&m祝日05月[3] = #trim( " 5, 4,,,      みどりの日  ,2007,"    , 4 )
　&m祝日05月[4] = #trim( " 5, 5,,,      こどもの日  ,1948,"    , 4 )
　&m祝日05月[5] = #trim( " 5, 1,,,      天皇の即位  ,2019,2019", 4 )  /* 天皇の即位の日及び即位礼正殿の儀の行われる日を休日とする法律 */
　&m祝日05月[6] = #trim( " 5, 2,,,      国民の休日  ,2019,2019", 4 )
　&m祝日06月[1] = #trim( " 6, 9,,,      親王結婚の儀,1993,1993", 4 )  /* 皇室慶弔行事 1993年（平成5年）6月9日   皇太子・皇太子徳仁親王の結婚の儀 */

　** 2020.04.01 要素数変更 &m祝日07月[5] → &m祝日07月[7]  &m祝日08月[3] → &m祝日08月[4]
　&m祝日07月[1] = #trim( " 7,20,,,      海の日      ,1996,2002", 4 )
　&m祝日07月[2] = #trim( " 7, 0, 3,月,  海の日      ,2003,2019", 4 )
　&m祝日07月[3] = #trim( " 7,23,,,      海の日      ,2020,2020", 4 )
　&m祝日07月[4] = #trim( " 7,22,,,      海の日      ,2021,2021", 4 )  /* 2020.04.01 オリンピック延期追加 */
　**&m祝日07月[4] = #trim( " 7, 0, 3,月,海の日      ,2021,"    , 4 )  /* 2020.04.01 オリンピック延期 &m祝日07月[4] → &m祝日07月[7] */
　&m祝日07月[5] = #trim( " 7,24,,,      スポーツの日,2020,2020", 4 )
　&m祝日07月[6] = #trim( " 7,23,,,      スポーツの日,2021,2021", 4 )  /* 2020.04.01 オリンピック延期追加 */
　&m祝日07月[7] = #trim( " 7, 0, 3,月,  海の日      ,2022,"    , 4 )  /* 2020.04.01 オリンピック延期 &m祝日07月[4] → &m祝日07月[7] */

　&m祝日08月[1] = #trim( " 8,11,,,      山の日      ,2016,2019", 4 )
　&m祝日08月[2] = #trim( " 8,10,,,      山の日      ,2020,2020", 4 )
　**&m祝日08月[3] = #trim( " 8,11,,,    山の日      ,2021,"    , 4 )
　&m祝日08月[3] = #trim( " 8,11,,,      山の日      ,2022,"    , 4 )  /* 2020.04.01 オリンピック延期 &m祝日08月[3] → &m祝日08月[3] */
　&m祝日08月[4] = #trim( " 8, 9,,,      山の日      ,2021,2021", 4 )  /* 2020.04.01 オリンピック延期追加 */

　&m祝日09月[1] = #trim( " 9,15,,,      敬老の日    ,1966,2002", 4 )
　&m祝日09月[2] = #trim( " 9, 0, 3,月,  敬老の日    ,2003,"    , 4 )
　&m祝日09月[3] = #trim( " 9, 0, 0,,    秋分の日    ,1948,"    , 4 )
　&m祝日09月[4] = #trim( " 9, 0, 0,,    国民の休日  ,2009,"    , 4 )  /* 敬老の日 と 秋分の日 の間で、月曜日（振り替え休日）を除く　最初の適用は2009年（平成21年）9月22日 */
　&m祝日10月[1] = #trim( "10,10,,,      体育の日    ,1966,1999", 4 )
　&m祝日10月[2] = #trim( "10, 0, 2,月,  体育の日    ,2000,2019", 4 )

　**&m祝日10月[3] = #trim( "10, 0, 2,月,スポーツの日,2021,"    , 4 )
　&m祝日10月[3] = #trim( "10, 0, 2,月,  スポーツの日,2022,"    , 4 )  /* 2020.04.01 オリンピック延期 &m祝日10月[3] → &m祝日10月[3] */

　&m祝日10月[4] = #trim( "10,22,,,  即位の礼正殿の儀,2019,2019", 4 )  /* 天皇の即位の日及び即位礼正殿の儀の行われる日を休日とする法律 */
　&m祝日11月[1] = #trim( "11, 3,,,      文化の日    ,1948,"    , 4 )
　&m祝日11月[2] = #trim( "11,12,,,    即位礼正殿の儀,1990,1990", 4 )  /* 皇室慶弔行事 1990年（平成2年）11月12日 即位の礼正殿の儀 */
　&m祝日11月[3] = #trim( "11,23,,,      勤労感謝の日,1948,"    , 4 )
　&m祝日12月[1] = #trim( "12,23,,,      天皇誕生日  ,1989,2018", 4 )
　**                     " 0, 0,,,     （振替休日） ,1973,"    , 4 )  振り替え休日はパラメータを設定できないので処理は、prcPublicHolidayVisible で行う

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　xINFprcStartup( )
　変数宣言　自動，文字列｛ &icon, &title = "INFprcStartup( )", &msg ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "HDL" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝

　** &traceON = 0
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　*---------- begin INF Framework INFprcStartup ---------------*
　*---------- 設定値 ---------------------------------------------------------------------------*
　*************************************************************************************************************************
　** INF Framework 第３.ｘ版以降は、メイン＆サブフォーム形式をサポートしていません　　　　　　　　　　　　　　　　 **
　** INF Framework は、メインフォームのみに適用してください　　　　　　　　　　　　　　　　　　　　　　　　　　　　**
　** INF Framework は、サブフォームに適用出来ません　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　**
　** &INFmMySubformObjectName = "ｻﾌﾞﾌｫｰﾑ_1" ← このような指定は変数が宣言されていないためにエラーになる可能性があります　**
　*************************************************************************************************************************
　&INFmEZWidthUse = 1 /* 表もどき( FLD/EZW )を使用する Yes = 1　ご注意！：「INIもどき」だけ使用する場合は No = 0 */
　条件　( #総件数 = #u )　&INFmEZWidthUse = 0 /* #総件数：編集対象表がないときは未定義値を返します。*/

　/* マスター定義リスト( &EZWmCaptionList1/&EZWmFieldList1 ) */
　&EZWmFieldLock = 1　/* 左からロックする項目の数 */

　** cmdCaption_1 ～ cmdCaption_40
　&EZWmCaptionList1 = "cmdCaption_1, cmdCaption_2, cmdCaption_3"
　＊&EZWmCaptionList1 = 　　　　　　　　　　 "cmdCaption_1, cmdCaption_2, cmdCaption_3, cmdCaption_4, cmdCaption_5, cmdCaption_6, cmdCaption_7, cmdCaption_8, cmdCaption_9, cmdCaption_10"
　＊&EZWmCaptionList1 = &EZWmCaptionList1 + ",cmdCaption_11,cmdCaption_12,cmdCaption_13,cmdCaption_14,cmdCaption_15,cmdCaption_16,cmdCaption_17,cmdCaption_18,cmdCaption_19,cmdCaption_20"
　＊&EZWmCaptionList1 = &EZWmCaptionList1 + ",cmdCaption_21,cmdCaption_22,cmdCaption_23,cmdCaption_24,cmdCaption_25,cmdCaption_26,cmdCaption_27,cmdCaption_28,cmdCaption_29,cmdCaption_30"
　＊&EZWmCaptionList1 = &EZWmCaptionList1 + ",cmdCaption_31,cmdCaption_32,cmdCaption_33,cmdCaption_34,cmdCaption_35,cmdCaption_36,cmdCaption_37,cmdCaption_38,cmdCaption_39,cmdCaption_40"
　** txtField_1 ～ txtField_40
　&EZWmFieldList1 = #文字置換( &EZWmCaptionList1, "cmdCaption", "txtField" )

　&EZWmLockCaptionColor = #u　 /* 列固定キャプションの色：デフォルトは編集対象表の列固定文字色　色名は桐ヘルプ［APPENDIX］の［色名の一覧表］参照  */
　&EZWmMarkerColor      = #u　 /* マーカの色：デフォルトは"チャコールグレイ"　色名は桐ヘルプ［APPENDIX］の［色名の一覧表］参照  */

　&INFmSaveVariableNameList = "&mDimensions, &FSCmFormColor, &mDateTypeNum, &mDateTimeScopeNum, &mPaddingTypeNum, &mClipboardCopy, &m変数名A, &m変数名B"  /* , &mSTRvariableUse, &m年月日variableUse */
　条件　( &traceON )　トレース出力　" &INFmSaveVariableNameList = " + &INFmSaveVariableNameList

　if ( #変数( "UTLSORTmLive" ) )
　　*---------- 設定値　デフォルト値は １ ---------------------------*
　　** &UTLSORTmRun  = 1  /* 項目ソート実行　　1:する      0:しない　*/
　　** &UTLSORTmKeep = 1  /* 処理対象行保持　　1:する　　　0:しない　*/
　　** &UTLSORTmSize = 1  /* ピクチャサイズ　　1:"16x16"　 2:"24x24" */
　　*---------- 設定値 ----------------------------------------------*
　end

　手続き実行　INFprcUTLStartup( )　/* Rev.176 で追加された一般手続き */

　*---------- 設定値 ---------------------------------------------------------------------------*
　*---------- end INF Framework INFprcStartup -----------------*

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了

手続き定義開始　INFprcStartup( )
　変数宣言　自動，文字列｛ &icon, &title = "INFprcStartup( )", &msg ｝
　変数宣言　自動，文字列｛ &comma = #jis( #hex("2C") ) ｝
　変数宣言　自動，整数　｛ &traceON = #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "ALL" ) .or #対応番号( #uc2( #変数( "INFmTraceModuleNameList" ) ), "INF" ) ｝
　変数宣言　自動，文字列｛ &traceMsg = #cond( #変数( "INFmTraceFormPathAdd" ), &INFmMyWfmPath ) + &INFmMyWfmName + " hdl=" + #last( " " + #str( &hwindow ), 2 ) + ">" + &title ｝
　**&traceON = 1
　条件　( &traceON )　トレース出力　&traceMsg + "を実行開始しました"

　*---------- begin Null / クラシック INF Framework INFprcStartup ---------------*
　*---------- 設定値 ---------------------------------------------------------------------------*
　*************************************************************************************************************************
　** INF Framework 第３.ｘ版以降は、メイン＆サブフォーム形式をサポートしていません　　　　　　　　　　　　　　　　　　　 **
　** INF Framework は、サブフォームに適用出来ません　INF Framework は、メインフォームのみに適用してください　　　　　　　**
　*************************************************************************************************************************
　&INFmMyWinMaximizeSave                  = 1  /* 次回最大化状態を　1：復元する　0：復元しない                                            */
　&INFmEZWidthUse                         = 1  /* 表もどき( FLD/EZW )を使用する Yes = 1　ご注意！：「INIもどき」だけ使用する場合は No = 0 */
　条件　( #総件数 = #u )　&INFmEZWidthUse = 0  /* #総件数：編集対象表がないときは未定義値を返します。                                     */

　if ( &INFmEZWidthUse )  /* 表もどき( FLD/EZW )を使用する場合 */

　　&EZWmFieldLock         = 1                  /* 左からロックする項目の数                 */
　　&EZWmLockCaptionColor  = #u                 /* 列固定キャプションの色：デフォルト( #u )は編集対象表の列固定文字色　色名は桐ヘルプ［APPENDIX］の［色名の一覧表］参照 */
　　&EZWmMarkerColor       = #u                 /* マーカの色：デフォルト( #u ) は"チャコールグレイ"　色名は桐ヘルプ［APPENDIX］の［色名の一覧表］参照                  */

　　** マスター定義リスト( &EZWmCaptionList1/&EZWmFieldList1 )
　　** cmdCaption_1 ～ cmdCaption_40
　　&EZWmCaptionList1 = 　　　　　　　　　　 "cmdCaption_1, cmdCaption_2, cmdCaption_3, cmdCaption_4, cmdCaption_5, cmdCaption_6, cmdCaption_7, cmdCaption_8, cmdCaption_9, cmdCaption_10"
　　&EZWmCaptionList1 = &EZWmCaptionList1 + ",cmdCaption_11,cmdCaption_12,cmdCaption_13,cmdCaption_14,cmdCaption_15,cmdCaption_16,cmdCaption_17,cmdCaption_18,cmdCaption_19,cmdCaption_20"
　　&EZWmCaptionList1 = &EZWmCaptionList1 + ",cmdCaption_21,cmdCaption_22,cmdCaption_23,cmdCaption_24,cmdCaption_25,cmdCaption_26,cmdCaption_27,cmdCaption_28,cmdCaption_29,cmdCaption_30"
　　&EZWmCaptionList1 = &EZWmCaptionList1 + ",cmdCaption_31,cmdCaption_32,cmdCaption_33,cmdCaption_34,cmdCaption_35,cmdCaption_36,cmdCaption_37,cmdCaption_38,cmdCaption_39,cmdCaption_40"
　　** txtField_1 ～ txtField_40
　　&EZWmFieldList1 = #文字置換( &EZWmCaptionList1, "cmdCaption", "txtField" )

　　** 2019.01.04 end の外へ移動　&INFmSaveVariableNameList = "&UTLSORTmKeep, &UTLSORTmPos"　/* ｿｰﾄ行保持, ｿｰﾄﾋﾟｸﾁｬ表示 */

　　if ( #変数( "UTLSORTmLive" ) )
　　　*---------- 設定値　デフォルト値は １ ---------------------------*
　　　** &UTLSORTmRun  = 1  /* 項目ソート実行　　1:する      0:しない　*/
　　　** &UTLSORTmKeep = 1  /* 処理対象行保持　　1:する　　　0:しない　*/
　　　** &UTLSORTmSize = 1  /* ピクチャサイズ　　1:"16x16"　 2:"24x24" */
　　　*---------- 設定値 ----------------------------------------------*
　　end

　end

　** Rev.218 2019.01.31 INFprcStartup  &INFmSaveVariableNameList変更
　** 局所変数：&INFmSaveVariableNameList は、*_info.txt に値を保存する変数名 変数名を半角コンマで区切った文字列
　&INFmSaveVariableNameList = #u
　条件　( &INFmEZWidthUse )　　                          &INFmSaveVariableNameList = "&UTLSORTmKeep, &UTLSORTmPos"　/* ｿｰﾄ行保持, ｿｰﾄﾋﾟｸﾁｬ表示位置 */
　条件　( #変数( "FSCmUse" ) .and #変数( "FSCmSave" ) )　&INFmSaveVariableNameList = &INFmSaveVariableNameList + #cond( &INFmSaveVariableNameList <> #u, &comma ) +  " &FSCmFormColor"
　&INFmSaveVariableNameList = &INFmSaveVariableNameList + #cond( &INFmSaveVariableNameList <> #u, &comma ) + " &EZWmFieldLock, &UTLSORTmDictionaryOrder, &UTLFLDmTextSelect"
　条件　( #バージョン番号 >= 10.1 .and #変数( "UImConvertLive" ) )　&INFmSaveVariableNameList = &INFmSaveVariableNameList + #cond( &INFmSaveVariableNameList <> #u, &comma ) +  " &UImModernUse"

　手続き実行　INFprcUTLStartup( )　/* Rev.176 で追加された一般手続き */

　*---------- 設定値 ---------------------------------------------------------------------------*
　*---------- end   Null / クラシック INF Framework INFprcStartup ---------------*

　条件　( &traceON )　トレース出力　&traceMsg + "を実行終了しました"
手続き定義終了
